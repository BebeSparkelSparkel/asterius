version: 2

jobs:
  asterius-test:
    docker:
      - image: debian:unstable
    environment:
      - ASTERIUS_BUILD_OPTIONS: -j2
      - DEBIAN_FRONTEND: noninteractive
      - LANG: C.UTF-8
      - MAKEFLAGS: -j2
      - PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - STACK_ROOT: /tmp/.stack
    working_directory: /tmp/asterius
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y \
              automake \
              cmake \
              curl \
              g++ \
              git \
              gnupg \
              libffi-dev \
              libgmp-dev \
              libncurses-dev \
              libnuma-dev \
              make \
              openssh-client \
              python-minimal \
              python3-minimal \
              xz-utils \
              zlib1g-dev
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_12.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
            mkdir -p /root/.local/bin
            curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C /root/.local/bin '*/stack'
      - checkout

      - run:
          name: Build asterius
          command: |
            git submodule update --init --recursive
            stack --no-terminal -j2 build --test --no-run-tests
            stack --no-terminal exec ahc-boot

      - run:
          name: Test asterius
          command: |
            stack --no-terminal test asterius:fib
            stack --no-terminal test asterius:jsffi
            stack --no-terminal test asterius:array
            stack --no-terminal test asterius:stableptr
            stack --no-terminal test asterius:rtsapi
            stack --no-terminal test asterius:teletype
            stack --no-terminal test asterius:bytearray
            stack --no-terminal test asterius:bigint
            stack --no-terminal test asterius:todomvc
            stack --no-terminal test asterius:cloudflare
            stack --no-terminal test asterius:exception
            stack --no-terminal test asterius:regression60
            stack --no-terminal test asterius:sizeof_md5context
            stack --no-terminal test asterius:largenum
            stack --no-terminal test asterius:fib --test-arguments="--no-gc-sections"
            stack --no-terminal test asterius:fib --test-arguments="--binaryen --no-gc-sections"

            cd ~/.local
            $CIRCLE_WORKING_DIRECTORY/utils/v8-node.py
            cd $CIRCLE_WORKING_DIRECTORY
            stack --no-terminal test asterius:fib --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:jsffi --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:array --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:stableptr --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:rtsapi --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:teletype --test-arguments="--debug" > /dev/null
            # stack --no-terminal test asterius:bytearray --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:bigint --test-arguments="--debug" > /dev/null
            stack --no-terminal test asterius:exception --test-arguments="--debug" > /dev/null

            stack --no-terminal test asterius:fib --test-arguments="--tail-calls"
            stack --no-terminal test asterius:fib --test-arguments="--tail-calls --no-gc-sections"

            # stack --no-terminal test asterius:nomain
            # stack --no-terminal test asterius:nomain --test-arguments="--tail-calls"

            # Run parts of the ghc-testuite that we have enabled for
            # regression testing.
            stack test asterius:ghc-testsuite --test-arguments="  --timeout=30s -l test/ghc-testsuite-filter";

  asterius-test-ghc-testsuite:
    docker:
      - image: debian:unstable
    environment:
      - ASTERIUS_BUILD_OPTIONS: -j2
      - DEBIAN_FRONTEND: noninteractive
      - LANG: C.UTF-8
      - MAKEFLAGS: -j2
      - PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - STACK_ROOT: /tmp/.stack
    working_directory: /tmp/asterius
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y python3-numpy python3-pandas python3-terminaltables
            apt install -y \
              automake \
              cmake \
              curl \
              g++ \
              git \
              gnupg \
              libffi-dev \
              libgmp-dev \
              libncurses-dev \
              libnuma-dev \
              make \
              openssh-client \
              python-minimal \
              python3-minimal \
              xz-utils \
              zlib1g-dev
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_12.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
            nodejs --version
            mkdir -p /root/.local/bin
            curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C /root/.local/bin '*/stack'

      - checkout
      - run:
            name: Build asterius
            command: |
              git submodule update --init --recursive
              stack --no-terminal -j2 build asterius --test --no-run-tests
              stack --no-terminal exec ahc-boot

      - run:
            name: Run GHC test suite on asterius
            # Allow a large timeout so we have enough time to write out the
            # CSV file.
            no_output_timeout: 30m
            command: |
              # run the GHC testsuite and copy the test artifact to `/tmp`
              nodejs --version


              # run test cases that can fail.
              stack --no-terminal test asterius:ghc-testsuite --test-arguments="--timeout=30s" || true
              cp asterius/test-report.csv /tmp
              python3 asterius/test/format-ghc-testsuite-report.py /tmp/test-report.csv > /tmp/test-report-ascii.txt
              python3 asterius/test/group-common-tests-ghc-testsuite-report.py /tmp/test-report.csv > /tmp/test-report-grouped-by-error-ascii.txt

      - store_artifacts:
          path: /tmp/test-report.csv

      - store_artifacts:
          path: /tmp/test-report-ascii.txt

      - store_artifacts:
          path: /tmp/test-report-grouped-by-error-ascii.txt

  asterius-test-ghc-testsuite-yolo:
    docker:
      - image: debian:unstable
    environment:
      - ASTERIUS_BUILD_OPTIONS: -j2
      - ASTERIUS_GHC_TESTSUITE_OPTIONS: --yolo
      - DEBIAN_FRONTEND: noninteractive
      - LANG: C.UTF-8
      - MAKEFLAGS: -j2
      - PATH: /root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - STACK_ROOT: /tmp/.stack
    working_directory: /tmp/asterius
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y python3-numpy python3-pandas python3-terminaltables
            apt install -y \
              automake \
              cmake \
              curl \
              g++ \
              git \
              gnupg \
              libffi-dev \
              libgmp-dev \
              libncurses-dev \
              libnuma-dev \
              make \
              openssh-client \
              python-minimal \
              python3-minimal \
              xz-utils \
              zlib1g-dev
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_12.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
            nodejs --version
            mkdir -p /root/.local/bin
            curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C /root/.local/bin '*/stack'

      - checkout
      - run:
            name: Build asterius
            command: |
              git submodule update --init --recursive
              stack --no-terminal -j2 build asterius --test --no-run-tests
              stack --no-terminal exec ahc-boot

      - run:
            name: Run GHC test suite on asterius
            # Allow a large timeout so we have enough time to write out the
            # CSV file.
            no_output_timeout: 30m
            command: |
              # run the GHC testsuite and copy the test artifact to `/tmp`
              nodejs --version


              # run test cases that can fail.
              stack --no-terminal test asterius:ghc-testsuite --test-arguments="--timeout=30s" || true
              cp asterius/test-report.csv /tmp
              python3 asterius/test/format-ghc-testsuite-report.py /tmp/test-report.csv > /tmp/test-report-ascii.txt
              python3 asterius/test/group-common-tests-ghc-testsuite-report.py /tmp/test-report.csv > /tmp/test-report-grouped-by-error-ascii.txt

      - store_artifacts:
          path: /tmp/test-report.csv

      - store_artifacts:
          path: /tmp/test-report-ascii.txt

      - store_artifacts:
          path: /tmp/test-report-grouped-by-error-ascii.txt

  asterius-build-docker:
    docker:
      - image: docker:edge-git
    steps:
      - run:
          name: Ensure we are on `tweag/asterius`
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi
      - setup_remote_docker
      - checkout
      - run:
          name: Make Docker image
          command: |
            git submodule update --init --recursive
            export ASTERIUS_REV=$(git rev-parse --short HEAD)
            docker login -u terrorjack -p $DOCKER_PASS
            docker build -t terrorjack/asterius:$ASTERIUS_REV .
            docker push terrorjack/asterius:$ASTERIUS_REV

  asterius-build-docs:
    docker:
      - image: debian:unstable
    environment:
      DEBIAN_FRONTEND: noninteractive
      LANG: C.UTF-8
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt full-upgrade -y
            apt install -y \
              curl \
              git \
              gnupg \
              openssh-client \
              python3-pip
            pip3 install recommonmark sphinx
            curl -sSL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key add -
            echo "deb https://deb.nodesource.com/node_12.x sid main" > /etc/apt/sources.list.d/nodesource.list
            apt update
            apt install -y nodejs
            npm install netlify-cli -g
      - checkout
      - run:
          name: Build & push docs
          command: |
            cd docs
            sphinx-build . _build
            if [ $CIRCLE_BRANCH = "master" ]
            then
              netlify deploy --dir=_build --message="$CIRCLE_SHA1" --prod
            else
              netlify deploy --dir=_build --message="$CIRCLE_SHA1"
            fi

  asterius-update-docker-tag:
    docker:
      - image: docker:edge-git
    steps:
      - run:
          name: Ensure we are on `tweag/asterius`
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi
      - setup_remote_docker
      - checkout
      - run:
          name: Update Docker tags
          command: |
            export ASTERIUS_REV=$(git rev-parse --short HEAD)
            docker login -u terrorjack -p $DOCKER_PASS
            docker pull terrorjack/asterius:$ASTERIUS_REV
            docker tag terrorjack/asterius:$ASTERIUS_REV terrorjack/asterius:$CIRCLE_BRANCH
            docker tag terrorjack/asterius:$ASTERIUS_REV terrorjack/asterius:latest
            docker push terrorjack/asterius:$CIRCLE_BRANCH
            if [ $CIRCLE_BRANCH = "master" ]; then
              docker push terrorjack/asterius:latest
            fi

workflows:
  version: 2
  build:
    jobs:
      - asterius-test
      - asterius-test-ghc-testsuite
      - asterius-test-ghc-testsuite-yolo
      - asterius-build-docker
      - asterius-build-docs
      - asterius-update-docker-tag:
          requires:
            - asterius-test
            - asterius-build-docker
