Module {functionMap' = fromList [("NoMain_.Lc1MX",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("NoMain_.Lc1Md",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 56}, valueType = I64}}, addBranches = [AddBranch {to = "2", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 2, value = Call {target = "strlen", operands = [Symbol {unresolvedSymbol = "NoMain_xzuaddrzh_bytes", symbolOffset = 0}], callReturnTypes = [I64]}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-48)}}, value = Symbol {unresolvedSymbol = "base_GHCziForeignPtr_PlainForeignPtr_con_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-40)}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-32)}}, value = Symbol {unresolvedSymbol = "bytestringzm0zi10zi9zi0zmEZZJ7bbpFgGADQ1WhOW4dB3_DataziByteStringziInternal_PS_con_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-47)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}}, value = Symbol {unresolvedSymbol = "NoMain_xzuaddrzh_bytes", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = ConstI64 0, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-31)}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 928, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 56, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_unpt_r1"}], blockReturnTypes = []}}, addBranches = []}),("3",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("NoMain_.Lc1Mw",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "NoMain_.Lc1My_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "2", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 7}, operand1 = ConstI64 0})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = ReturnCall {returnCallTarget64 = "NoMain_.Lc1My"}}, addBranches = []}),("3",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("NoMain_.Lc1My",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64,I64,I64], body = CFG {graph = RelooperRun {entry = "1", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 7}}}},SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 15}}}},SetLocal {index = 4, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 23}}}},SetLocal {index = 5, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 31}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-32)}}, value = Symbol {unresolvedSymbol = "NoMain_.Ls1IS_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}}, value = GetLocal {index = 5, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = GetLocal {index = 3, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = GetLocal {index = 4, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = Symbol {unresolvedSymbol = "NoMain_.Lc1MX_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-32)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}, valueType = I64}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 7}, operand1 = ConstI64 0})},AddBranch {to = "3", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}, valueType = I64}}, addBranches = [AddBranch {to = "2", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "0", addBranchCondition = Nothing}]}),("2",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 928, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 40, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_unpt_r1"}], blockReturnTypes = []}}, addBranches = []}),("3",RelooperBlock {addBlock = AddBlock {code = ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}}, addBranches = []}),("4",RelooperBlock {addBlock = AddBlock {code = ReturnCall {returnCallTarget64 = "NoMain_.Lc1MX"}}, addBranches = []}),("5",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("NoMain_.Lc1Nd",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("NoMain_.Ls1IS_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, addBranches = [AddBranch {to = "1", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, operand1 = Load {signed = False, bytes = 8, offset = 864, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "2", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 8, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}], blockReturnTypes = []}}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64}}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "3", addBranchCondition = Nothing}]}),("3",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}}, value = Symbol {unresolvedSymbol = "stg_upd_frame_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},SetLocal {index = 3, value = Call {target = "__asterius_toJSArrayBuffer", operands = [Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 24}}}, operand1 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 32}}}},Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 16}}}], callReturnTypes = [I64]}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = Symbol {unresolvedSymbol = "base_GHCziStable_StablePtr_con_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = GetLocal {index = 3, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-7)}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("4",RelooperBlock {addBlock = AddBlock {code = Store {bytes = 8, offset = 928, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 16, valueType = I64}}, addBranches = [AddBranch {to = "1", addBranchCondition = Nothing}]}),("5",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("NoMain_x1_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "1", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, operand1 = Load {signed = False, bytes = 8, offset = 864, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "2", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "NoMain_x1_closure", symbolOffset = 0}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}], blockReturnTypes = []}}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = Symbol {unresolvedSymbol = "NoMain_.Lc1Mw_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}, valueType = I64},ReturnCall {returnCallTarget64 = "NoMain_x2_entry"}], blockReturnTypes = []}}, addBranches = []}),("3",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("NoMain_x2_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "1", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}, operand1 = Load {signed = False, bytes = 8, offset = 864, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "2", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "NoMain_x2_closure", symbolOffset = 0}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}], blockReturnTypes = []}}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = Symbol {unresolvedSymbol = "NoMain_.Lc1Md_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "base_GHCziForeignPtr_NoFinalizzers_closure", symbolOffset = 1}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_newMutVarzh"}], blockReturnTypes = []}}, addBranches = []}),("3",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("NoMain_x_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64], body = CFG {graph = RelooperRun {entry = "2", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}}, value = Symbol {unresolvedSymbol = "stg_bh_upd_frame_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}}, value = Symbol {unresolvedSymbol = "NoMain_.Lc1Nd_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}, valueType = I64},ReturnCall {returnCallTarget64 = "NoMain_x1_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "3", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}, operand1 = Load {signed = False, bytes = 8, offset = 864, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "4", addBranchCondition = Nothing}]}),("3",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 8, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}], blockReturnTypes = []}}, addBranches = []}),("4",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Call {target = "newCAF", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = [I64]}}}, addBranches = [AddBranch {to = "1", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 0})},AddBranch {to = "0", addBranchCondition = Nothing}]}),("5",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("StgReturn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "__asterius_pc", symbolOffset = 0}}, value = ConstI64 0, valueType = I64}}),("__asterius_toJSArrayBuffer",Function {functionType = FunctionType {paramTypes = [I64,I64], returnTypes = [I64]}, varTypes = [I32,I32,F64], body = Block {name = "", bodys = [SetLocal {index = 4, value = CallImport {target' = "__asterius_toJSArrayBuffer_imp", operands = [Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = GetLocal {index = 0, valueType = I64}},Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = GetLocal {index = 1, valueType = I64}}], callImportReturnTypes = [F64]}},Unary {unaryOp = TruncUFloat64ToInt64, operand0 = GetLocal {index = 4, valueType = F64}}], blockReturnTypes = [I64]}}),("__stg_EAGER_BLACKHOLE_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_BLACKHOLE_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("__stg_gc_enter_1",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}}, value = Symbol {unresolvedSymbol = "stg_enter_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("__stg_gc_fun",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64,I64], body = CFG {graph = RelooperRun {entry = "8", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI64 63}}}, addBranches = [AddBranch {to = "1", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 4, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}}}}, addBranches = [AddBranch {to = "5", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 0})},AddBranch {to = "6", addBranchCondition = Nothing}]}),("2",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "3", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "4", addBranchCondition = Nothing}]}),("3",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}}}}}, addBranches = [AddBranch {to = "1", addBranchCondition = Nothing}]}),("4",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 3}, operand1 = Symbol {unresolvedSymbol = "stg_arg_bitmaps", symbolOffset = 0}}}}, operand1 = ConstI64 63}}}, addBranches = [AddBranch {to = "1", addBranchCondition = Nothing}]}),("5",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("6",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "5", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "7", addBranchCondition = Nothing}]}),("7",RelooperBlock {addBlock = AddBlock {code = ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 3}, operand1 = Symbol {unresolvedSymbol = "stg_stack_save_entries", symbolOffset = 0}}}}}}, addBranches = []}),("8",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 3, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}, operand1 = ConstI64 24}},SetLocal {index = 4, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 0})},AddBranch {to = "2", addBranchCondition = Nothing}]}),("9",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("allocate",Function {functionType = FunctionType {paramTypes = [I64,I64], returnTypes = [I64]}, varTypes = [I32,I32,F64], body = Block {name = "", bodys = [SetLocal {index = 4, value = CallImport {target' = "__asterius_allocate", operands = [Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = GetLocal {index = 1, valueType = I64}}], callImportReturnTypes = [F64]}},Unary {unaryOp = TruncUFloat64ToInt64, operand0 = GetLocal {index = 4, valueType = F64}}], blockReturnTypes = [I64]}}),("allocatePinned",Function {functionType = FunctionType {paramTypes = [I64,I64], returnTypes = [I64]}, varTypes = [I32,I32,F64], body = Block {name = "", bodys = [SetLocal {index = 4, value = CallImport {target' = "__asterius_allocatePinned", operands = [Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = GetLocal {index = 1, valueType = I64}}], callImportReturnTypes = [F64]}},Unary {unaryOp = TruncUFloat64ToInt64, operand0 = GetLocal {index = 4, valueType = F64}}], blockReturnTypes = [I64]}}),("base_GHCziForeignPtr_NoFinalizzers_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("base_GHCziForeignPtr_PlainForeignPtr_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("base_GHCziPtr_Ptr_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("base_GHCziStable_StablePtr_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("bytestringzm0zi10zi9zi0zmEZZJ7bbpFgGADQ1WhOW4dB3_DataziByteStringziInternal_PS_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("createGenThread",Function {functionType = FunctionType {paramTypes = [I64,I64,I64], returnTypes = [I64]}, varTypes = [I32,I32,I64,I64,I64], body = Block {name = "", bodys = [SetLocal {index = 5, value = Call {target = "createThread", operands = [GetLocal {index = 0, valueType = I64},GetLocal {index = 1, valueType = I64}], callReturnTypes = [I64]}},SetLocal {index = 6, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},SetLocal {index = 7, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}}}, value = Symbol {unresolvedSymbol = "stg_enter_info", symbolOffset = 0}, valueType = I64},GetLocal {index = 5, valueType = I64}], blockReturnTypes = [I64]}}),("createIOThread",Function {functionType = FunctionType {paramTypes = [I64,I64,I64], returnTypes = [I64]}, varTypes = [I32,I32,I64,I64,I64,I64], body = Block {name = "", bodys = [SetLocal {index = 5, value = Call {target = "createThread", operands = [GetLocal {index = 0, valueType = I64},GetLocal {index = 1, valueType = I64}], callReturnTypes = [I64]}},SetLocal {index = 6, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}}}, value = Symbol {unresolvedSymbol = "stg_ap_v_info", symbolOffset = 0}, valueType = I64},SetLocal {index = 7, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},SetLocal {index = 8, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 8, valueType = I64}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 8, valueType = I64}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 8, valueType = I64}}}}, value = Symbol {unresolvedSymbol = "stg_enter_info", symbolOffset = 0}, valueType = I64},GetLocal {index = 5, valueType = I64}], blockReturnTypes = [I64]}}),("createStrictIOThread",Function {functionType = FunctionType {paramTypes = [I64,I64,I64], returnTypes = [I64]}, varTypes = [I32,I32,I64,I64,I64,I64,I64], body = Block {name = "", bodys = [SetLocal {index = 5, value = Call {target = "createThread", operands = [GetLocal {index = 0, valueType = I64},GetLocal {index = 1, valueType = I64}], callReturnTypes = [I64]}},SetLocal {index = 6, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}}}, value = Symbol {unresolvedSymbol = "stg_forceIO_info", symbolOffset = 0}, valueType = I64},SetLocal {index = 7, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}}}, value = Symbol {unresolvedSymbol = "stg_ap_v_info", symbolOffset = 0}, valueType = I64},SetLocal {index = 8, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 8, valueType = I64}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 8, valueType = I64}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 8, valueType = I64}}}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},SetLocal {index = 9, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 9, valueType = I64}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 9, valueType = I64}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 9, valueType = I64}}}}, value = Symbol {unresolvedSymbol = "stg_enter_info", symbolOffset = 0}, valueType = I64},GetLocal {index = 5, valueType = I64}], blockReturnTypes = [I64]}}),("createThread",Function {functionType = FunctionType {paramTypes = [I64,I64], returnTypes = [I64]}, varTypes = [I32,I32,I64,I64,I64,I32], body = Block {name = "", bodys = [SetLocal {index = 4, value = Call {target = "allocatePinned", operands = [GetLocal {index = 0, valueType = I64},GetLocal {index = 1, valueType = I64}], callReturnTypes = [I64]}},SetLocal {index = 5, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 120}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_STACK_info", symbolOffset = 0}, valueType = I64},SetLocal {index = 6, value = Binary {binaryOp = SubInt64, operand0 = GetLocal {index = 1, valueType = I64}, operand1 = ConstI64 18}},Store {bytes = 4, offset = 8, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}, value = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}, valueType = I32},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}, value = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = MulInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = ConstI64 8}}, valueType = I64},Store {bytes = 4, offset = 12, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}, value = ConstI32 1, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_TSO_info", symbolOffset = 0}, valueType = I64},Store {bytes = 2, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = ConstI32 1, valueType = I32},Store {bytes = 2, offset = 34, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = ConstI32 0, valueType = I32},Store {bytes = 4, offset = 36, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = ConstI32 0, valueType = I32},Store {bytes = 4, offset = 56, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = ConstI32 1, valueType = I32},Store {bytes = 4, offset = 52, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = ConstI32 0, valueType = I32},Store {bytes = 8, offset = 72, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = GetLocal {index = 0, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = GetLocal {index = 5, valueType = I64}, valueType = I64},Store {bytes = 4, offset = 112, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}, valueType = I32},Store {bytes = 8, offset = 104, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = ConstI64 0, valueType = I64},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}}, value = Symbol {unresolvedSymbol = "stg_stop_thread_info", symbolOffset = 0}, valueType = I64},SetLocal {index = 7, value = CallImport {target' = "__asterius_newTSO", operands = [], callImportReturnTypes = [I32]}},Store {bytes = 4, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = GetLocal {index = 7, valueType = I32}, valueType = I32},GetLocal {index = 4, valueType = I64}], blockReturnTypes = [I64]}}),("deRefStablePtr",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32,F64], body = Block {name = "", bodys = [SetLocal {index = 3, value = CallImport {target' = "__asterius_deRefStablePtr", operands = [Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = GetLocal {index = 0, valueType = I64}}], callImportReturnTypes = [F64]}},Unary {unaryOp = TruncUFloat64ToInt64, operand0 = GetLocal {index = 3, valueType = F64}}], blockReturnTypes = [I64]}}),("deRefStablePtr_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "deRefStablePtr", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("getStablePtr",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32,F64], body = Block {name = "", bodys = [SetLocal {index = 3, value = CallImport {target' = "__asterius_newStablePtr", operands = [Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = GetLocal {index = 0, valueType = I64}}], callImportReturnTypes = [F64]}},Unary {unaryOp = TruncUFloat64ToInt64, operand0 = GetLocal {index = 3, valueType = F64}}], blockReturnTypes = [I64]}}),("getStablePtr_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "getStablePtr", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("ghczmprim_GHCziTypes_Czh_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("ghczmprim_GHCziTypes_Dzh_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("ghczmprim_GHCziTypes_False_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("ghczmprim_GHCziTypes_Izh_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("ghczmprim_GHCziTypes_True_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 2}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("ghczmprim_GHCziTypes_Wzh_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("ghczmprim_GHCziTypes_ZC_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 2}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("ghczmprim_GHCziTypes_ZMZN_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("hs_free_stable_ptr",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = []}, varTypes = [I32,I32], body = CallImport {target' = "__asterius_freeStablePtr", operands = [Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = GetLocal {index = 0, valueType = I64}}], callImportReturnTypes = []}}),("hs_free_stable_ptr_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = []}, varTypes = [], body = Call {target = "hs_free_stable_ptr", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = []}}),("hs_init",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,F64], body = Block {name = "", bodys = [Store {bytes = 4, offset = 944, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI32 0, valueType = I32},Store {bytes = 4, offset = 948, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI32 0, valueType = I32},Store {bytes = 1, offset = 960, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI32 0, valueType = I32},Store {bytes = 4, offset = 964, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI32 0, valueType = I32},Store {bytes = 1, offset = 968, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI32 0, valueType = I32},Store {bytes = 8, offset = 1072, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 0, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "__stg_EAGER_BLACKHOLE_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 8, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "__stg_gc_enter_1", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "__stg_gc_fun", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 1048, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 0, valueType = I64},Store {bytes = 8, offset = 1056, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 0, valueType = I64},Store {bytes = 4, offset = 1064, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI32 0, valueType = I32},Store {bytes = 8, offset = 888, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 0, valueType = I64},Store {bytes = 8, offset = 896, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 0, valueType = I64},SetLocal {index = 2, value = CallImport {target' = "__asterius_hpAlloc", operands = [ConstF64 8.0], callImportReturnTypes = [F64]}},Store {bytes = 8, offset = 912, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Unary {unaryOp = TruncUFloat64ToInt64, operand0 = GetLocal {index = 2, valueType = F64}}, valueType = I64}], blockReturnTypes = []}}),("integerzmwiredzmin_GHCziIntegerziType_Integer_con_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("loadI64",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32], body = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}}}),("loadI64_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "loadI64", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("main",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I32], body = Block {name = "", bodys = [SetLocal {index = 2, value = Call {target = "rts_evalLazyIO", operands = [Symbol {unresolvedSymbol = "Main_main_closure", symbolOffset = 0}], callReturnTypes = [I32]}},Call {target = "rts_checkSchedStatus", operands = [GetLocal {index = 2, valueType = I32}], callReturnTypes = []}], blockReturnTypes = []}}),("newCAF",Function {functionType = FunctionType {paramTypes = [I64,I64], returnTypes = [I64]}, varTypes = [I32,I32,I64,I64], body = Block {name = "", bodys = [SetLocal {index = 4, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 1, valueType = I64}}}},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 1, valueType = I64}}, value = GetLocal {index = 4, valueType = I64}, valueType = I64},SetLocal {index = 5, value = Call {target = "allocate", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0},ConstI64 2], callReturnTypes = [I64]}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_CAF_BLACKHOLE_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 8, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}, value = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}}, valueType = I64},Store {bytes = 8, offset = 8, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 1, valueType = I64}}, value = GetLocal {index = 5, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 1, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_IND_STATIC_info", symbolOffset = 0}, valueType = I64},GetLocal {index = 5, valueType = I64}], blockReturnTypes = [I64]}}),("rts_HeapStackCheck_.Lc1NB",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = GetLocal {index = 2, valueType = I64}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("rts_apply",Function {functionType = FunctionType {paramTypes = [I64,I64], returnTypes = [I64]}, varTypes = [I32,I32,I64], body = Block {name = "", bodys = [SetLocal {index = 4, value = Call {target = "allocate", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0},ConstI64 4], callReturnTypes = [I64]}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_ap_2_upd_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 16, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = GetLocal {index = 0, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = GetLocal {index = 1, valueType = I64}, valueType = I64},GetLocal {index = 4, valueType = I64}], blockReturnTypes = [I64]}}),("rts_apply_wrapper",Function {functionType = FunctionType {paramTypes = [F64,F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_apply", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}},Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 1, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_checkSchedStatus",Function {functionType = FunctionType {paramTypes = [I32], returnTypes = []}, varTypes = [I32,I32,I32], body = Block {name = "", bodys = [SetLocal {index = 3, value = Call {target = "rts_getSchedStatus", operands = [GetLocal {index = 0, valueType = I32}], callReturnTypes = [I32]}},If {condition = Binary {binaryOp = EqInt32, operand0 = GetLocal {index = 3, valueType = I32}, operand1 = ConstI32 1}, ifTrue = Nop, ifFalse = Just (Block {name = "", bodys = [CallImport {target' = "__asterius_eventI32", operands = [ConstI32 0], callImportReturnTypes = []},Unreachable], blockReturnTypes = []})}], blockReturnTypes = []}}),("rts_checkSchedStatus_wrapper",Function {functionType = FunctionType {paramTypes = [I32], returnTypes = []}, varTypes = [], body = Call {target = "rts_checkSchedStatus", operands = [GetLocal {index = 0, valueType = I32}], callReturnTypes = []}}),("rts_eval",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I32]}, varTypes = [I32,I32,I64], body = Block {name = "", bodys = [SetLocal {index = 3, value = Call {target = "createGenThread", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0},ConstI64 8192,GetLocal {index = 0, valueType = I64}], callReturnTypes = [I64]}},Call {target = "scheduleWaitThread", operands = [GetLocal {index = 3, valueType = I64}], callReturnTypes = []},Load {signed = False, bytes = 4, offset = 48, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}], blockReturnTypes = [I32]}}),("rts_evalIO",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I32]}, varTypes = [I32,I32,I64], body = Block {name = "", bodys = [SetLocal {index = 3, value = Call {target = "createStrictIOThread", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0},ConstI64 8192,GetLocal {index = 0, valueType = I64}], callReturnTypes = [I64]}},Call {target = "scheduleWaitThread", operands = [GetLocal {index = 3, valueType = I64}], callReturnTypes = []},Load {signed = False, bytes = 4, offset = 48, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}], blockReturnTypes = [I32]}}),("rts_evalIO_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [I32]}, varTypes = [], body = Call {target = "rts_evalIO", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I32]}}),("rts_evalLazyIO",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I32]}, varTypes = [I32,I32,I64], body = Block {name = "", bodys = [SetLocal {index = 3, value = Call {target = "createIOThread", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0},ConstI64 8192,GetLocal {index = 0, valueType = I64}], callReturnTypes = [I64]}},Call {target = "scheduleWaitThread", operands = [GetLocal {index = 3, valueType = I64}], callReturnTypes = []},Load {signed = False, bytes = 4, offset = 48, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}], blockReturnTypes = [I32]}}),("rts_evalLazyIO_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [I32]}, varTypes = [], body = Call {target = "rts_evalLazyIO", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I32]}}),("rts_eval_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [I32]}, varTypes = [], body = Call {target = "rts_eval", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I32]}}),("rts_getBool",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32], body = Unary {unaryOp = ExtendUInt32, operand0 = Binary {binaryOp = NeInt32, operand0 = ConstI32 0, operand1 = Load {signed = False, bytes = 4, offset = 20, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 0, valueType = I64}, operand1 = ConstI64 (-8)}}}}}}}}),("rts_getBool_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_getBool", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_getChar",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32], body = Load {signed = False, bytes = 8, offset = 8, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 0, valueType = I64}, operand1 = ConstI64 (-8)}}}}),("rts_getChar_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_getChar", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_getDouble",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [F64]}, varTypes = [I32,I32], body = Load {signed = False, bytes = 8, offset = 8, valueType = F64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 0, valueType = I64}, operand1 = ConstI64 (-8)}}}}),("rts_getDouble_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Call {target = "rts_getDouble", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [F64]}}),("rts_getInt",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32], body = Load {signed = False, bytes = 8, offset = 8, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 0, valueType = I64}, operand1 = ConstI64 (-8)}}}}),("rts_getInt_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_getInt", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_getPtr",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32], body = Load {signed = False, bytes = 8, offset = 8, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 0, valueType = I64}, operand1 = ConstI64 (-8)}}}}),("rts_getPtr_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_getPtr", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_getSchedStatus",Function {functionType = FunctionType {paramTypes = [I32], returnTypes = [I32]}, varTypes = [I32,I32,I32], body = Block {name = "", bodys = [SetLocal {index = 3, value = CallImport {target' = "__asterius_getTSOrstat", operands = [GetLocal {index = 0, valueType = I32}], callImportReturnTypes = [I32]}},GetLocal {index = 3, valueType = I32}], blockReturnTypes = [I32]}}),("rts_getSchedStatus_wrapper",Function {functionType = FunctionType {paramTypes = [I32], returnTypes = [I32]}, varTypes = [], body = Call {target = "rts_getSchedStatus", operands = [GetLocal {index = 0, valueType = I32}], callReturnTypes = [I32]}}),("rts_getStablePtr",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32], body = Load {signed = False, bytes = 8, offset = 8, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 0, valueType = I64}, operand1 = ConstI64 (-8)}}}}),("rts_getStablePtr_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_getStablePtr", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_getWord",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32], body = Load {signed = False, bytes = 8, offset = 8, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 0, valueType = I64}, operand1 = ConstI64 (-8)}}}}),("rts_getWord_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_getWord", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_mkBool",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32], body = If {condition = Unary {unaryOp = EqZInt64, operand0 = GetLocal {index = 0, valueType = I64}}, ifTrue = Symbol {unresolvedSymbol = "ghczmprim_GHCziTypes_False_closure", symbolOffset = 1}, ifFalse = Just (Symbol {unresolvedSymbol = "ghczmprim_GHCziTypes_True_closure", symbolOffset = 2})}}),("rts_mkBool_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_mkBool", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_mkChar",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32,I64], body = Block {name = "", bodys = [SetLocal {index = 3, value = Call {target = "allocate", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0},ConstI64 2], callReturnTypes = [I64]}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = Symbol {unresolvedSymbol = "ghczmprim_GHCziTypes_Czh_con_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 8, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = GetLocal {index = 0, valueType = I64}, valueType = I64},GetLocal {index = 3, valueType = I64}], blockReturnTypes = [I64]}}),("rts_mkChar_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_mkChar", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_mkDouble",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [I64]}, varTypes = [I32,I32,I64], body = Block {name = "", bodys = [SetLocal {index = 3, value = Call {target = "allocate", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0},ConstI64 2], callReturnTypes = [I64]}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = Symbol {unresolvedSymbol = "ghczmprim_GHCziTypes_Dzh_con_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 8, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = GetLocal {index = 0, valueType = F64}, valueType = F64},GetLocal {index = 3, valueType = I64}], blockReturnTypes = [I64]}}),("rts_mkDouble_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_mkDouble", operands = [GetLocal {index = 0, valueType = F64}], callReturnTypes = [I64]}}}),("rts_mkInt",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32,I64], body = Block {name = "", bodys = [SetLocal {index = 3, value = Call {target = "allocate", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0},ConstI64 2], callReturnTypes = [I64]}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = Symbol {unresolvedSymbol = "ghczmprim_GHCziTypes_Izh_con_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 8, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = GetLocal {index = 0, valueType = I64}, valueType = I64},GetLocal {index = 3, valueType = I64}], blockReturnTypes = [I64]}}),("rts_mkInt_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_mkInt", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_mkPtr",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32,I64], body = Block {name = "", bodys = [SetLocal {index = 3, value = Call {target = "allocate", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0},ConstI64 2], callReturnTypes = [I64]}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = Symbol {unresolvedSymbol = "base_GHCziPtr_Ptr_con_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 8, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = GetLocal {index = 0, valueType = I64}, valueType = I64},GetLocal {index = 3, valueType = I64}], blockReturnTypes = [I64]}}),("rts_mkPtr_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_mkPtr", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_mkStablePtr",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32,I64], body = Block {name = "", bodys = [SetLocal {index = 3, value = Call {target = "allocate", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0},ConstI64 2], callReturnTypes = [I64]}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = Symbol {unresolvedSymbol = "base_GHCziStable_StablePtr_con_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 8, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = GetLocal {index = 0, valueType = I64}, valueType = I64},GetLocal {index = 3, valueType = I64}], blockReturnTypes = [I64]}}),("rts_mkStablePtr_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_mkStablePtr", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("rts_mkWord",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32,I64], body = Block {name = "", bodys = [SetLocal {index = 3, value = Call {target = "allocate", operands = [Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0},ConstI64 2], callReturnTypes = [I64]}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = Symbol {unresolvedSymbol = "ghczmprim_GHCziTypes_Wzh_con_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 8, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = GetLocal {index = 0, valueType = I64}, valueType = I64},GetLocal {index = 3, valueType = I64}], blockReturnTypes = [I64]}}),("rts_mkWord_wrapper",Function {functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}, varTypes = [], body = Unary {unaryOp = ConvertSInt64ToFloat64, operand0 = Call {target = "rts_mkWord", operands = [Unary {unaryOp = TruncSFloat64ToInt64, operand0 = GetLocal {index = 0, valueType = F64}}], callReturnTypes = [I64]}}}),("scheduleWaitThread",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = []}, varTypes = [I32,I32,I64,I64,I64,F64], body = Block {name = "", bodys = [Block {name = "0", bodys = [Loop {name = "1", body = Block {name = "", bodys = [If {condition = Load {signed = False, bytes = 1, offset = 960, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, ifTrue = Block {name = "", bodys = [CallImport {target' = "__asterius_eventI32", operands = [ConstI32 1], callImportReturnTypes = []},Unreachable], blockReturnTypes = []}, ifFalse = Just Nop},Store {bytes = 8, offset = 896, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 0, valueType = I64}, valueType = I64},Store {bytes = 4, offset = 1068, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI32 0, valueType = I32},Store {bytes = 1, offset = 960, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI32 1, valueType = I32},Store {bytes = 4, offset = 964, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI32 0, valueType = I32},If {condition = Unary {unaryOp = EqZInt32, operand0 = Load {signed = False, bytes = 4, offset = 56, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}}}, ifTrue = Store {bytes = 4, offset = 56, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}, value = ConstI32 1, valueType = I32}, ifFalse = Just Nop},If {condition = Unary {unaryOp = EqZInt32, operand0 = Load {signed = False, bytes = 4, offset = 12, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}}}}}, ifTrue = Store {bytes = 4, offset = 12, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}}}, value = ConstI32 1, valueType = I32}, ifFalse = Just Nop},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "__asterius_pc", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "stg_returnToStackTop", symbolOffset = 0}, valueType = I64},Loop {name = "2", body = Block {name = "", bodys = [SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "__asterius_pc", symbolOffset = 0}}}},If {condition = Unary {unaryOp = EqZInt64, operand0 = GetLocal {index = 3, valueType = I64}}, ifTrue = Nop, ifFalse = Just (Block {name = "", bodys = [CallIndirect {indirectTarget = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, operands = [], functionType = FunctionType {paramTypes = [], returnTypes = []}},Break {name = "2", breakCondition = Nothing}], blockReturnTypes = []})}], blockReturnTypes = []}},SetLocal {index = 4, value = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}},Store {bytes = 1, offset = 960, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI32 0, valueType = I32},Block {name = "3", bodys = [Block {name = "4", bodys = [Block {name = "5", bodys = [Block {name = "6", bodys = [Block {name = "7", bodys = [Block {name = "8", bodys = [Block {name = "9", bodys = [Break {name = "5", breakCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 5})},Break {name = "6", breakCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 4})},Break {name = "7", breakCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 3})},Break {name = "8", breakCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 2})},Break {name = "9", breakCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 1})},Break {name = "4", breakCondition = Nothing}], blockReturnTypes = []},CallImport {target' = "__asterius_gcRootTSO", operands = [Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = GetLocal {index = 0, valueType = I64}}], callImportReturnTypes = []},SetLocal {index = 5, value = Load {signed = False, bytes = 8, offset = 928, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},Store {bytes = 8, offset = 928, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 0, valueType = I64},If {condition = Unary {unaryOp = EqZInt64, operand0 = GetLocal {index = 5, valueType = I64}}, ifTrue = Block {name = "", bodys = [CallImport {target' = "__asterius_eventI32", operands = [ConstI32 2], callImportReturnTypes = []},Unreachable], blockReturnTypes = []}, ifFalse = Just Nop},SetLocal {index = 6, value = CallImport {target' = "__asterius_hpAlloc", operands = [Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = GetLocal {index = 5, valueType = I64}}], callImportReturnTypes = [F64]}},Store {bytes = 8, offset = 912, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Unary {unaryOp = TruncUFloat64ToInt64, operand0 = GetLocal {index = 6, valueType = F64}}, valueType = I64},Break {name = "1", breakCondition = Nothing}], blockReturnTypes = []},Block {name = "", bodys = [CallImport {target' = "__asterius_eventI32", operands = [ConstI32 3], callImportReturnTypes = []},Unreachable], blockReturnTypes = []}], blockReturnTypes = []},Break {name = "1", breakCondition = Nothing}], blockReturnTypes = []},Block {name = "", bodys = [CallImport {target' = "__asterius_eventI32", operands = [ConstI32 4], callImportReturnTypes = []},Unreachable], blockReturnTypes = []}], blockReturnTypes = []},If {condition = Binary {binaryOp = EqInt32, operand0 = Load {signed = False, bytes = 2, offset = 32, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}}, operand1 = ConstI32 4}, ifTrue = Block {name = "", bodys = [CallImport {target' = "__asterius_setTSOret", operands = [Load {signed = False, bytes = 4, offset = 48, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}},Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = Load {signed = False, bytes = 8, offset = 8, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 16, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}}}}}}}], callImportReturnTypes = []},CallImport {target' = "__asterius_setTSOrstat", operands = [Load {signed = False, bytes = 4, offset = 48, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}},ConstI32 1], callImportReturnTypes = []},Break {name = "0", breakCondition = Nothing}], blockReturnTypes = []}, ifFalse = Just (Block {name = "", bodys = [CallImport {target' = "__asterius_setTSOret", operands = [Load {signed = False, bytes = 4, offset = 48, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}},ConstF64 0.0], callImportReturnTypes = []},CallImport {target' = "__asterius_setTSOrstat", operands = [Load {signed = False, bytes = 4, offset = 48, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 0, valueType = I64}}},ConstI32 2], callImportReturnTypes = []},Break {name = "0", breakCondition = Nothing}], blockReturnTypes = []})}], blockReturnTypes = []},Block {name = "", bodys = [CallImport {target' = "__asterius_eventI32", operands = [ConstI32 5], callImportReturnTypes = []},Unreachable], blockReturnTypes = []}], blockReturnTypes = []}], blockReturnTypes = []}}], blockReturnTypes = []},CallImport {target' = "__asterius_gcRootTSO", operands = [Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = GetLocal {index = 0, valueType = I64}}], callImportReturnTypes = []}], blockReturnTypes = []}}),("stg_ARR_WORDS_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_StgMiscClosures_c2gQ_str", symbolOffset = 0},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},ReturnCall {returnCallTarget64 = "stg_ARR_WORDS_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_BCO_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_apply_interp_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_yield_to_interpreter"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_BLACKHOLE_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64,I64,I64,I64], body = CFG {graph = RelooperRun {entry = "12", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 8}}}}}, addBranches = [AddBranch {to = "1", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 7}, operand1 = ConstI64 0})},AddBranch {to = "2", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("10",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 8}}}}}, addBranches = [AddBranch {to = "7", addBranchCondition = Nothing}]}),("11",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 2, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 34}}, value = ConstI32 2, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = GetLocal {index = 4, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 3, valueType = I64}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_block_blackhole"}], blockReturnTypes = []}}, addBranches = []}),("12",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, addBranches = [AddBranch {to = "0", addBranchCondition = Nothing}]}),("13",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "10", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 29})},AddBranch {to = "9", addBranchCondition = Nothing}]}),("14",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "15", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 15})},AddBranch {to = "17", addBranchCondition = Nothing}]}),("15",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "9", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 8})},AddBranch {to = "16", addBranchCondition = Nothing}]}),("16",RelooperBlock {addBlock = AddBlockWithSwitch {code = Nop, condition = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = SubInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 16}}}}, operand1 = ConstI64 8}}}, addBranches = [AddBranchForSwitch {to = "1", indexes = [6,5,4,3,2,1,0]},AddBranch {to = "21", addBranchCondition = Nothing}]}),("17",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "1", addBranchCondition = Just (Binary {binaryOp = GeUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 25})},AddBranch {to = "18", addBranchCondition = Nothing}]}),("18",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "9", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 16}}}}, operand1 = ConstI64 23})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("19",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "20", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 28})},AddBranch {to = "13", addBranchCondition = Nothing}]}),("2",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 5, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 2, valueType = I64}}}}}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = Symbol {unresolvedSymbol = "stg_IND_info", symbolOffset = 0}})},AddBranch {to = "3", addBranchCondition = Nothing}]}),("20",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "9", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 27})},AddBranch {to = "10", addBranchCondition = Nothing}]}),("21",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []}),("3",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = Symbol {unresolvedSymbol = "stg_TSO_info", symbolOffset = 0}})},AddBranch {to = "5", addBranchCondition = Nothing}]}),("4",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 4, value = Call {target = "allocate", operands = [Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 (-24)},ConstI64 4], callReturnTypes = [I64]}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_MSG_BLACKHOLE_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 24}}, value = GetLocal {index = 3, valueType = I64}, valueType = I64},SetLocal {index = 6, value = Call {target = "messageBlackHole", operands = [Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 (-24)},GetLocal {index = 4, valueType = I64}], callReturnTypes = [I64]}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = ConstI64 0})},AddBranch {to = "11", addBranchCondition = Nothing}]}),("5",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = Symbol {unresolvedSymbol = "stg_BLOCKING_QUEUE_CLEAN_info", symbolOffset = 0}})},AddBranch {to = "6", addBranchCondition = Nothing}]}),("6",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = Symbol {unresolvedSymbol = "stg_BLOCKING_QUEUE_DIRTY_info", symbolOffset = 0}})},AddBranch {to = "7", addBranchCondition = Nothing}]}),("7",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "1", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 7}, operand1 = ConstI64 0})},AddBranch {to = "8", addBranchCondition = Nothing}]}),("8",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 5, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 2, valueType = I64}}}}}, addBranches = [AddBranch {to = "14", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 26})},AddBranch {to = "19", addBranchCondition = Nothing}]}),("9",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}}], blockReturnTypes = []}}, addBranches = []})], labelHelper = 0}}}),("stg_BLOCKING_QUEUE_CLEAN_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_StgMiscClosures_c2cF_str", symbolOffset = 0},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},ReturnCall {returnCallTarget64 = "stg_BLOCKING_QUEUE_CLEAN_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_BLOCKING_QUEUE_DIRTY_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_StgMiscClosures_c2cL_str", symbolOffset = 0},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},ReturnCall {returnCallTarget64 = "stg_BLOCKING_QUEUE_DIRTY_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_CAF_BLACKHOLE_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_BLACKHOLE_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_DEAD_WEAK_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_StgMiscClosures_c2dg_str", symbolOffset = 0},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},ReturnCall {returnCallTarget64 = "stg_DEAD_WEAK_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_IND_STATIC_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, operand1 = ConstI64 (-8)}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_IND_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, operand1 = ConstI64 (-8)}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_MSG_BLACKHOLE_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_StgMiscClosures_c2gm_str", symbolOffset = 0},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},ReturnCall {returnCallTarget64 = "stg_MSG_BLACKHOLE_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_MUT_VAR_DIRTY_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_StgMiscClosures_c2hO_str", symbolOffset = 0},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},ReturnCall {returnCallTarget64 = "stg_MUT_VAR_DIRTY_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_NO_FINALIZER_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_StgMiscClosures_c2ds_str", symbolOffset = 0},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},ReturnCall {returnCallTarget64 = "stg_NO_FINALIZER_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_PAP_apply",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64,I64,I64,I64,I64], body = CFG {graph = RelooperRun {entry = "4", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "10", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "2", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 2})},AddBranch {to = "3", addBranchCondition = Nothing}]}),("10",RelooperBlock {addBlock = AddBlock {code = ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 24}}}}}, addBranches = []}),("11",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_apply_interp_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_yield_to_interpreter"}], blockReturnTypes = []}}, addBranches = []}),("3",RelooperBlock {addBlock = AddBlock {code = ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = ShlInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}}, operand1 = ConstI64 3}, operand1 = Symbol {unresolvedSymbol = "stg_ap_stack_entries", symbolOffset = 0}}}}}}, addBranches = []}),("4",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 4, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 12}}}}}}, addBranches = [AddBranch {to = "5", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 3}, operand1 = ConstI64 2}}, operand1 = Load {signed = False, bytes = 8, offset = 864, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "6", addBranchCondition = Nothing}]}),("5",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_unpt_r1"}], blockReturnTypes = []}}, addBranches = []}),("6",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Binary {binaryOp = ShlInt64, operand0 = Binary {binaryOp = SubInt64, operand0 = ConstI64 0, operand1 = GetLocal {index = 4, valueType = I64}}, operand1 = ConstI64 3}}, valueType = I64},SetLocal {index = 5, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},SetLocal {index = 6, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}},SetLocal {index = 7, value = ConstI64 0}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "7", addBranchCondition = Nothing}]}),("7",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "8", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = GetLocal {index = 4, valueType = I64}})},AddBranch {to = "9", addBranchCondition = Nothing}]}),("8",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 3}}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}}, valueType = I64},SetLocal {index = 6, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = ConstI64 8}},SetLocal {index = 7, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 1}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "7", addBranchCondition = Nothing}]}),("9",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 16}}}, valueType = I64},SetLocal {index = 3, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}, operand1 = ConstI64 24}},SetLocal {index = 2, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "10", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 0})},AddBranch {to = "0", addBranchCondition = Nothing}]})], labelHelper = 0}}}),("stg_PAP_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_Apply_cTg_str", symbolOffset = 0}], callReturnTypes = []},ReturnCall {returnCallTarget64 = "stg_PAP_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_STACK_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_StgMiscClosures_c2d4_str", symbolOffset = 0},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},ReturnCall {returnCallTarget64 = "stg_STACK_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_TSO_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_StgMiscClosures_c2cY_str", symbolOffset = 0},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},ReturnCall {returnCallTarget64 = "stg_TSO_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_WEAK_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_StgMiscClosures_c2da_str", symbolOffset = 0},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},ReturnCall {returnCallTarget64 = "stg_WEAK_entry"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_2_upd_entry",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "1", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, operand1 = Load {signed = False, bytes = 8, offset = 864, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "2", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 8, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}], blockReturnTypes = []}}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}}, value = Symbol {unresolvedSymbol = "stg_upd_frame_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_ap_p_fast"}], blockReturnTypes = []}}, addBranches = []}),("3",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_p_fast",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64,I64,I64], body = CFG {graph = RelooperRun {entry = "15", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-1)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "2", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, operand1 = Load {signed = False, bytes = 8, offset = 864, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "3", addBranchCondition = Nothing}]}),("10",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 2, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 2, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_PAP_info", symbolOffset = 0}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 8}}, value = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 (-1)}}, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 12}}, value = ConstI32 1, valueType = I32},SetLocal {index = 4, value = ConstI64 0}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "11", addBranchCondition = Nothing}]}),("11",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "12", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "13", addBranchCondition = Nothing}]}),("12",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 3}}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Binary {binaryOp = ShlInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 1}, operand1 = ConstI64 3}}}}, valueType = I64},SetLocal {index = 4, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 1}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "11", addBranchCondition = Nothing}]}),("13",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("14",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 3, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, operand1 = ConstI64 28}}}}}}, addBranches = [AddBranch {to = "5", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "6", addBranchCondition = Nothing}]}),("15",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 7}, operand1 = ConstI64 1})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("16",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 8}}}, operand1 = ConstI32 8})},AddBranch {to = "17", addBranchCondition = Nothing}]}),("17",RelooperBlock {addBlock = AddBlockWithSwitch {code = Nop, condition = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = SubInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 8}}}}, operand1 = ConstI64 8}}}, addBranches = [AddBranchForSwitch {to = "14", indexes = [6,5,4,3,2,1,0]},AddBranch {to = "18", addBranchCondition = Nothing}]}),("18",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_ap_p_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "__stg_gc_enter_1"}], blockReturnTypes = []}}, addBranches = []}),("3",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}, valueType = I64},SetLocal {index = 5, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, operand1 = ConstI64 8}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = GeUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 8}}}, operand1 = ConstI32 15})},AddBranch {to = "16", addBranchCondition = Nothing}]}),("4",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_ap_p_ret"}], blockReturnTypes = []}}, addBranches = []}),("5",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("6",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "8", addBranchCondition = Just (Binary {binaryOp = GeUInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 8})},AddBranch {to = "7", addBranchCondition = Nothing}]}),("7",RelooperBlock {addBlock = AddBlock {code = Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = GetLocal {index = 3, valueType = I64}}, valueType = I64}}, addBranches = [AddBranch {to = "8", addBranchCondition = Nothing}]}),("8",RelooperBlock {addBlock = AddBlock {code = Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}, valueType = I64}}, addBranches = [AddBranch {to = "9", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "10", addBranchCondition = Nothing}]}),("9",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 928, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 32, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_ap_p_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "__stg_gc_enter_1"}], blockReturnTypes = []}}, addBranches = []})], labelHelper = 0}}}),("stg_ap_p_ret",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64,I64,I64,I64,I64,I64], body = CFG {graph = RelooperRun {entry = "15", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 928, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_ap_p_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "__stg_gc_enter_1"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 3, value = Binary {binaryOp = SubInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, operand1 = GetLocal {index = 2, valueType = I64}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_PAP_info", symbolOffset = 0}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 8}}, value = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 (-1)}}, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 12}}, value = ConstI32 1, valueType = I32},SetLocal {index = 5, value = ConstI64 0}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "2", addBranchCondition = Nothing}]}),("10",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 3, value = Binary {binaryOp = SubInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, operand1 = GetLocal {index = 2, valueType = I64}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_PAP_info", symbolOffset = 0}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 8}}, value = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 (-1)}}, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 12}}, value = ConstI32 1, valueType = I32},SetLocal {index = 5, value = ConstI64 0}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "11", addBranchCondition = Nothing}]}),("11",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = GeUInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "12", addBranchCondition = Nothing}]}),("12",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 3}}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Binary {binaryOp = ShlInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 1}, operand1 = ConstI64 3}}}}, valueType = I64},SetLocal {index = 5, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 1}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "11", addBranchCondition = Nothing}]}),("13",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 4, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = ConstI64 28}}}}}}, addBranches = [AddBranch {to = "6", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "7", addBranchCondition = Nothing}]}),("14",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "stg_ap_p_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_PAP_apply"}], blockReturnTypes = []}}, addBranches = []}),("15",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "16", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 7}, operand1 = ConstI64 1})},AddBranch {to = "17", addBranchCondition = Nothing}]}),("16",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-1)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("17",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}, valueType = I64},SetLocal {index = 6, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "32", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 58})},AddBranch {to = "36", addBranchCondition = Nothing}]}),("18",RelooperBlock {addBlock = AddBlock {code = Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_AutoApply_c9q_str", symbolOffset = 0}], callReturnTypes = []}}, addBranches = [AddBranch {to = "18", addBranchCondition = Nothing}]}),("19",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_BCO_entry"}], blockReturnTypes = []}}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = GeUInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "3", addBranchCondition = Nothing}]}),("20",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}, valueType = I64},SetLocal {index = 2, value = ConstI64 32}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("21",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 2, value = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = ShlInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 12}}}}, operand1 = ConstI64 3}, operand1 = ConstI64 32}},Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = GetLocal {index = 2, valueType = I64}}, valueType = I64}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "22", addBranchCondition = Nothing}]}),("22",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 7, value = Binary {binaryOp = SubInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, operand1 = GetLocal {index = 2, valueType = I64}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_PAP_info", symbolOffset = 0}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 8}}, value = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 (-1)}}, valueType = I32},SetLocal {index = 8, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 12}}}}},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 12}}, value = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 1}}, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},SetLocal {index = 5, value = ConstI64 0}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "23", addBranchCondition = Nothing}]}),("23",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "24", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = GetLocal {index = 8, valueType = I64}})},AddBranch {to = "25", addBranchCondition = Nothing}]}),("24",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 3}}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 3}}}}, valueType = I64},SetLocal {index = 5, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 1}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "23", addBranchCondition = Nothing}]}),("25",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 5, value = ConstI64 0}}, addBranches = [AddBranch {to = "26", addBranchCondition = Nothing}]}),("26",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "27", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "28", addBranchCondition = Nothing}]}),("27",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = ShlInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = GetLocal {index = 5, valueType = I64}}, operand1 = ConstI64 3}}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Binary {binaryOp = ShlInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 1}, operand1 = ConstI64 3}}}}, valueType = I64},SetLocal {index = 5, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 1}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "26", addBranchCondition = Nothing}]}),("28",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 7, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("29",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 4, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}}}}, addBranches = [AddBranch {to = "14", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "21", addBranchCondition = Nothing}]}),("3",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 3}}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Binary {binaryOp = ShlInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 1}, operand1 = ConstI64 3}}}}, valueType = I64},SetLocal {index = 5, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 1}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "2", addBranchCondition = Nothing}]}),("30",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_ap_p_info", symbolOffset = 0}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}}}], blockReturnTypes = []}}, addBranches = []}),("31",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_ap_p_ret"}], blockReturnTypes = []}}, addBranches = []}),("32",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "33", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 29})},AddBranch {to = "35", addBranchCondition = Nothing}]}),("33",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "18", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 8})},AddBranch {to = "34", addBranchCondition = Nothing}]}),("34",RelooperBlock {addBlock = AddBlockWithSwitch {code = Nop, condition = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = SubInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = ConstI64 16}}}}, operand1 = ConstI64 8}}}, addBranches = [AddBranchForSwitch {to = "5", indexes = [15]},AddBranchForSwitch {to = "13", indexes = [6,5,4,3,2,1,0]},AddBranchForSwitch {to = "29", indexes = [17]},AddBranchForSwitch {to = "30", indexes = [18,16,14,13,12,11,10,9,8,7]},AddBranchForSwitch {to = "31", indexes = [20,19]},AddBranch {to = "37", addBranchCondition = Nothing}]}),("35",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "18", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = ConstI64 16}}}}, operand1 = ConstI64 38})},AddBranch {to = "30", addBranchCondition = Nothing}]}),("36",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "30", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 59})},AddBranch {to = "18", addBranchCondition = Nothing}]}),("37",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []}),("4",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 3, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("5",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 4, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}}}}}, addBranches = [AddBranch {to = "19", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "20", addBranchCondition = Nothing}]}),("6",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("7",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "9", addBranchCondition = Just (Binary {binaryOp = GeUInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 8})},AddBranch {to = "8", addBranchCondition = Nothing}]}),("8",RelooperBlock {addBlock = AddBlock {code = Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = GetLocal {index = 4, valueType = I64}}, valueType = I64}}, addBranches = [AddBranch {to = "9", addBranchCondition = Nothing}]}),("9",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}, valueType = I64},SetLocal {index = 2, value = ConstI64 32}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "10", addBranchCondition = Nothing}]})], labelHelper = 0}}}),("stg_ap_stk_",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_d",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 128, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = F64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = F64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_f",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 4, offset = 104, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 4, offset = 0, valueType = F32, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = F32},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_l",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_n",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_nn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_nnn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_nnp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_np",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_npn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_npp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_p",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_pn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_pnn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_pnp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_pp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_ppn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_ppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_pppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 56, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}}, valueType = I64},Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_ppppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}}, valueType = I64},Store {bytes = 8, offset = 56, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}}, valueType = I64},Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_pppppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}}, valueType = I64},Store {bytes = 8, offset = 56, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}}, valueType = I64},Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_ppppppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}}, valueType = I64},Store {bytes = 8, offset = 56, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}}, valueType = I64},Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_pppppppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}}, valueType = I64},Store {bytes = 8, offset = 56, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}}, valueType = I64},Store {bytes = 8, offset = 48, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 40, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_v16",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_v32",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_stk_v64",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ap_v_ret",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64,I64,I64,I64,I64,I64], body = CFG {graph = RelooperRun {entry = "3", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}}}}, addBranches = [AddBranch {to = "10", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "11", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_ap_v_info", symbolOffset = 0}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}}], blockReturnTypes = []}}, addBranches = []}),("10",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "stg_ap_v_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_PAP_apply"}], blockReturnTypes = []}}, addBranches = []}),("11",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 4, value = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = ShlInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 12}}}}, operand1 = ConstI64 3}, operand1 = ConstI64 24}},Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = GetLocal {index = 4, valueType = I64}}, valueType = I64}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "22", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "12", addBranchCondition = Nothing}]}),("12",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 5, value = Binary {binaryOp = SubInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, operand1 = GetLocal {index = 4, valueType = I64}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_PAP_info", symbolOffset = 0}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 8}}, value = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 (-1)}}, valueType = I32},SetLocal {index = 6, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 12}}}}},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 12}}, value = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 6, valueType = I64}}, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},SetLocal {index = 7, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},SetLocal {index = 8, value = ConstI64 0}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "13", addBranchCondition = Nothing}]}),("13",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "14", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = GetLocal {index = 6, valueType = I64}})},AddBranch {to = "15", addBranchCondition = Nothing}]}),("14",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 3}}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 3}}}}, valueType = I64},SetLocal {index = 8, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 1}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "13", addBranchCondition = Nothing}]}),("15",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 8, value = ConstI64 0}}, addBranches = [AddBranch {to = "16", addBranchCondition = Nothing}]}),("16",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "17", addBranchCondition = Just (Binary {binaryOp = LtUInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 0})},AddBranch {to = "18", addBranchCondition = Nothing}]}),("17",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = ShlInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = GetLocal {index = 8, valueType = I64}}, operand1 = ConstI64 3}}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Binary {binaryOp = ShlInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 1}, operand1 = ConstI64 3}}}}, valueType = I64},SetLocal {index = 8, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 1}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "16", addBranchCondition = Nothing}]}),("18",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 5, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("19",RelooperBlock {addBlock = AddBlock {code = Call {target = "barf", operands = [Symbol {unresolvedSymbol = "rts_AutoApply_c8_str", symbolOffset = 0}], callReturnTypes = []}}, addBranches = [AddBranch {to = "19", addBranchCondition = Nothing}]}),("2",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_ap_v_ret"}], blockReturnTypes = []}}, addBranches = []}),("20",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_BCO_entry"}], blockReturnTypes = []}}, addBranches = []}),("21",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},SetLocal {index = 4, value = ConstI64 24}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "22", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "23", addBranchCondition = Nothing}]}),("22",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 928, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 4, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_ap_v_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "__stg_gc_enter_1"}], blockReturnTypes = []}}, addBranches = []}),("23",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 7, value = Binary {binaryOp = SubInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, operand1 = GetLocal {index = 4, valueType = I64}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_PAP_info", symbolOffset = 0}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 8}}, value = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 (-1)}}, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 12}}, value = ConstI32 0, valueType = I32},SetLocal {index = 8, value = ConstI64 0}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "24", addBranchCondition = Nothing}]}),("24",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "26", addBranchCondition = Just (Binary {binaryOp = GeUInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 0})},AddBranch {to = "25", addBranchCondition = Nothing}]}),("25",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 3}}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Binary {binaryOp = ShlInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 1}, operand1 = ConstI64 3}}}}, valueType = I64},SetLocal {index = 8, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 1}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "24", addBranchCondition = Nothing}]}),("26",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 7, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("27",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}}}}}, addBranches = [AddBranch {to = "20", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "21", addBranchCondition = Nothing}]}),("28",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 1}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("29",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "31", addBranchCondition = Just (Binary {binaryOp = GeUInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 8})},AddBranch {to = "30", addBranchCondition = Nothing}]}),("3",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 7}, operand1 = ConstI64 1})},AddBranch {to = "5", addBranchCondition = Nothing}]}),("30",RelooperBlock {addBlock = AddBlock {code = Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = GetLocal {index = 2, valueType = I64}}, valueType = I64}}, addBranches = [AddBranch {to = "31", addBranchCondition = Nothing}]}),("31",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},SetLocal {index = 4, value = ConstI64 24}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "22", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "6", addBranchCondition = Nothing}]}),("32",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "33", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 29})},AddBranch {to = "35", addBranchCondition = Nothing}]}),("33",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "19", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 8})},AddBranch {to = "34", addBranchCondition = Nothing}]}),("34",RelooperBlock {addBlock = AddBlockWithSwitch {code = Nop, condition = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = SubInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}}, operand1 = ConstI64 8}}}, addBranches = [AddBranchForSwitch {to = "0", indexes = [17]},AddBranchForSwitch {to = "1", indexes = [18,16,14,13,12,11,10,9,8,7]},AddBranchForSwitch {to = "2", indexes = [20,19]},AddBranchForSwitch {to = "9", indexes = [6,5,4,3,2,1,0]},AddBranchForSwitch {to = "27", indexes = [15]},AddBranch {to = "37", addBranchCondition = Nothing}]}),("35",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "19", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}}, operand1 = ConstI64 38})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("36",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "1", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 59})},AddBranch {to = "19", addBranchCondition = Nothing}]}),("37",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []}),("4",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-1)}}}}}}], blockReturnTypes = []}}, addBranches = []}),("5",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}, valueType = I64},SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "32", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 58})},AddBranch {to = "36", addBranchCondition = Nothing}]}),("6",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 7, value = Binary {binaryOp = SubInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, operand1 = GetLocal {index = 4, valueType = I64}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 7, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_PAP_info", symbolOffset = 0}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 8}}, value = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 (-1)}}, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 12}}, value = ConstI32 0, valueType = I32},SetLocal {index = 8, value = ConstI64 0}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "7", addBranchCondition = Nothing}]}),("7",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "26", addBranchCondition = Just (Binary {binaryOp = GeUInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 0})},AddBranch {to = "8", addBranchCondition = Nothing}]}),("8",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = ConstI64 24}, operand1 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 3}}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Binary {binaryOp = ShlInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 1}, operand1 = ConstI64 3}}}}, valueType = I64},SetLocal {index = 8, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 1}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "7", addBranchCondition = Nothing}]}),("9",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 28}}}}}}, addBranches = [AddBranch {to = "28", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "29", addBranchCondition = Nothing}]})], labelHelper = 0}}}),("stg_apply_interp_ret",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = ReturnCall {returnCallTarget64 = "stg_yield_to_interpreter"}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_bh_upd_frame_ret",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_marked_upd_frame_ret"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_block_blackhole",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_enter_info", symbolOffset = 0}, valueType = I64},Store {bytes = 2, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = ConstI32 1, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 912}}, value = ConstI64 4, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_returnToSched"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_enter_ret",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64], body = CFG {graph = RelooperRun {entry = "5", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "1", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 7}, operand1 = ConstI64 0})},AddBranch {to = "2", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("10",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "3", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}}, operand1 = ConstI64 23})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("11",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "12", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 28})},AddBranch {to = "13", addBranchCondition = Nothing}]}),("12",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "3", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 27})},AddBranch {to = "4", addBranchCondition = Nothing}]}),("13",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 29})},AddBranch {to = "3", addBranchCondition = Nothing}]}),("14",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 2, valueType = I64}}}}}, addBranches = [AddBranch {to = "6", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 26})},AddBranch {to = "11", addBranchCondition = Nothing}]}),("3",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}}], blockReturnTypes = []}}, addBranches = []}),("4",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 8}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "0", addBranchCondition = Nothing}]}),("5",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}}}, addBranches = [AddBranch {to = "0", addBranchCondition = Nothing}]}),("6",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "7", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 15})},AddBranch {to = "9", addBranchCondition = Nothing}]}),("7",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "3", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 8})},AddBranch {to = "8", addBranchCondition = Nothing}]}),("8",RelooperBlock {addBlock = AddBlockWithSwitch {code = Nop, condition = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = SubInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}}, operand1 = ConstI64 8}}}, addBranches = [AddBranchForSwitch {to = "1", indexes = [6,5,4,3,2,1,0]},AddBranch {to = "14", addBranchCondition = Nothing}]}),("9",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "1", addBranchCondition = Just (Binary {binaryOp = GeUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 25})},AddBranch {to = "10", addBranchCondition = Nothing}]})], labelHelper = 0}}}),("stg_forceIO_ret",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64], body = CFG {graph = RelooperRun {entry = "1", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 8}}}}}, addBranches = [AddBranch {to = "2", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, addBranches = [AddBranch {to = "2", addBranchCondition = Nothing}]}),("10",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "5", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}}, operand1 = ConstI64 23})},AddBranch {to = "3", addBranchCondition = Nothing}]}),("11",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "12", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 28})},AddBranch {to = "13", addBranchCondition = Nothing}]}),("12",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "5", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 27})},AddBranch {to = "0", addBranchCondition = Nothing}]}),("13",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 29})},AddBranch {to = "5", addBranchCondition = Nothing}]}),("14",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "3", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 7}, operand1 = ConstI64 0})},AddBranch {to = "4", addBranchCondition = Nothing}]}),("3",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("4",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 2, valueType = I64}}}}}, addBranches = [AddBranch {to = "6", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 26})},AddBranch {to = "11", addBranchCondition = Nothing}]}),("5",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}}], blockReturnTypes = []}}, addBranches = []}),("6",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "7", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 15})},AddBranch {to = "9", addBranchCondition = Nothing}]}),("7",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "5", addBranchCondition = Just (Binary {binaryOp = LtUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 8})},AddBranch {to = "8", addBranchCondition = Nothing}]}),("8",RelooperBlock {addBlock = AddBlockWithSwitch {code = Nop, condition = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = SubInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}}, operand1 = ConstI64 8}}}, addBranches = [AddBranchForSwitch {to = "3", indexes = [6,5,4,3,2,1,0]},AddBranch {to = "14", addBranchCondition = Nothing}]}),("9",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "3", addBranchCondition = Just (Binary {binaryOp = GeUInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, operand1 = ConstI32 25})},AddBranch {to = "10", addBranchCondition = Nothing}]})], labelHelper = 0}}}),("stg_gc_fun_ret",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64], body = CFG {graph = RelooperRun {entry = "5", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 24}}}}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 1})},AddBranch {to = "2", addBranchCondition = Nothing}]}),("2",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "3", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 2})},AddBranch {to = "4", addBranchCondition = Nothing}]}),("3",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_apply_interp_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_yield_to_interpreter"}], blockReturnTypes = []}}, addBranches = []}),("4",RelooperBlock {addBlock = AddBlock {code = ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = ShlInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 3}, operand1 = Symbol {unresolvedSymbol = "stg_ap_stack_entries", symbolOffset = 0}}}}}}, addBranches = []}),("5",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}, valueType = I64},SetLocal {index = 2, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}}, operand1 = ConstI64 24}},SetLocal {index = 3, value = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 2, valueType = I64}}}}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 0})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("6",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_gc_noregs",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64,I64,I64,I64,I64,I64], body = CFG {graph = RelooperRun {entry = "13", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 928, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, valueType = I64}}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 0})},AddBranch {to = "5", addBranchCondition = Nothing}]}),("1",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "2", addBranchCondition = Just (Unary {unaryOp = WrapInt64, operand0 = ConstI64 0})},AddBranch {to = "3", addBranchCondition = Nothing}]}),("10",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 36}}}}, operand1 = ConstI64 256}, operand1 = ConstI64 0})},AddBranch {to = "11", addBranchCondition = Nothing}]}),("11",RelooperBlock {addBlock = AddBlock {code = ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}}, addBranches = []}),("12",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 2, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = ConstI32 1, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 912}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_returnToSched"}], blockReturnTypes = []}}, addBranches = []}),("13",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("14",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = ConstI64 1}}, addBranches = [AddBranch {to = "12", addBranchCondition = Nothing}]}),("3",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = ConstI64 2}}, addBranches = [AddBranch {to = "12", addBranchCondition = Nothing}]}),("4",RelooperBlock {addBlock = AddBlock {code = SetLocal {index = 2, value = ConstI64 3}}, addBranches = [AddBranch {to = "12", addBranchCondition = Nothing}]}),("5",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "2", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 928, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 4096})},AddBranch {to = "7", addBranchCondition = Nothing}]}),("6",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 928, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 0, valueType = I64},SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 8}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},SetLocal {index = 4, value = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 104}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 104}}}, operand1 = Binary {binaryOp = SubInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, operand1 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 1048}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 1048}}}, operand1 = Binary {binaryOp = ShrUInt64, operand0 = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, operand1 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}, operand1 = ConstI64 3}}, valueType = I64},Store {bytes = 8, offset = 912, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}, valueType = I64},SetLocal {index = 5, value = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},SetLocal {index = 6, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 8}}}},Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = ConstI64 (-8)}, valueType = I64},SetLocal {index = 7, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 5, valueType = I64}}}},Store {bytes = 8, offset = 880, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 7, valueType = I64}, operand1 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = ShlInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 48}}}}, operand1 = ConstI64 12}, operand1 = ConstI64 (-1)}}, valueType = I64},SetLocal {index = 8, value = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 104}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 8, valueType = I64}, operand1 = ConstI64 104}}}, operand1 = Binary {binaryOp = SubInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = GetLocal {index = 7, valueType = I64}}}, valueType = I64}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = NeInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 1040}}}, operand1 = ConstI32 0})},AddBranch {to = "8", addBranchCondition = Nothing}]}),("7",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "2", addBranchCondition = Just (Binary {binaryOp = EqInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}}, operand1 = ConstI64 0})},AddBranch {to = "6", addBranchCondition = Nothing}]}),("8",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "4", addBranchCondition = Just (Binary {binaryOp = NeInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 1044}}}, operand1 = ConstI32 0})},AddBranch {to = "9", addBranchCondition = Nothing}]}),("9",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "11", addBranchCondition = Just (Binary {binaryOp = GeSInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 104}}}, operand1 = ConstI64 0})},AddBranch {to = "10", addBranchCondition = Nothing}]})], labelHelper = 0}}}),("stg_gc_prim_p",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}}, value = Symbol {unresolvedSymbol = "rts_HeapStackCheck_.Lc1NB_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_gc_unpt_r1",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}}, value = Symbol {unresolvedSymbol = "stg_ret_p_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-16)}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_marked_upd_frame_ret",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64], body = CFG {graph = RelooperRun {entry = "4", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "checkBlockingQueues", operands = [Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 (-24)},Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Nop}, addBranches = [AddBranch {to = "3", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "2", addBranchCondition = Nothing}]}),("2",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_BLACKHOLE_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("3",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Call {target = "updateThunk", operands = [Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 (-24)},Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}},GetLocal {index = 3, valueType = I64},Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("4",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}},SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 8}}}}], blockReturnTypes = []}}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = NeInt64, operand0 = Binary {binaryOp = AndInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 7}, operand1 = ConstI64 0})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("5",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_newMutVarzh",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64], body = CFG {graph = RelooperRun {entry = "2", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 928, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 16, valueType = I64},Store {bytes = 8, offset = 32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "stg_newMutVarzh", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_prim_p"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 2, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 2, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_MUT_VAR_DIRTY_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = GetLocal {index = 2, valueType = I64}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("2",RelooperBlock {addBlock = AddBlock {code = Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64}}, addBranches = [AddBranch {to = "0", addBranchCondition = Just (Binary {binaryOp = GtUInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = Load {signed = False, bytes = 8, offset = 880, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}})},AddBranch {to = "1", addBranchCondition = Nothing}]}),("3",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_ret_p_ret",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_returnToSched",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 24}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 8}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 104}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 104}}}, operand1 = Binary {binaryOp = SubInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, operand1 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}}}, valueType = I64},Call {target = "threadPaused", operands = [Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 (-24)},Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}], callReturnTypes = []},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},ReturnCall {returnCallTarget64 = "StgReturn"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_returnToSchedNotPaused",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 24}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 8}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 104}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 104}}}, operand1 = Binary {binaryOp = SubInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, operand1 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}}}, valueType = I64},ReturnCall {returnCallTarget64 = "StgReturn"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_returnToStackTop",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64,I64,I64,I64], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 24}}}},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 16}}}, valueType = I64},Store {bytes = 8, offset = 864, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 192}, valueType = I64},Store {bytes = 8, offset = 928, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = ConstI64 0, valueType = I64},SetLocal {index = 4, value = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},SetLocal {index = 5, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 8}}}},Store {bytes = 8, offset = 872, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = ConstI64 (-8)}, valueType = I64},SetLocal {index = 6, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 4, valueType = I64}}}},Store {bytes = 8, offset = 880, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 6, valueType = I64}, operand1 = Binary {binaryOp = AddInt64, operand0 = Binary {binaryOp = ShlInt64, operand0 = Unary {unaryOp = ExtendSInt32, operand0 = Load {signed = False, bytes = 4, offset = 0, valueType = I32, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 4, valueType = I64}, operand1 = ConstI64 48}}}}, operand1 = ConstI64 12}, operand1 = ConstI64 (-1)}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 104}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 104}}}, operand1 = Binary {binaryOp = SubInt64, operand0 = GetLocal {index = 5, valueType = I64}, operand1 = GetLocal {index = 6, valueType = I64}}}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 0, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_d",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-32)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 128, valueType = F64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = F64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 1, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_f",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-32)}, valueType = I64},Store {bytes = 4, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 4, offset = 104, valueType = F32, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = F32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 1, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_l",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 1, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_n",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-32)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 1, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_nn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-40)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 2, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_nnn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-48)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 3, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_nnp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-48)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 3, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_np",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-40)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 2, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_npn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-48)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 3, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_npp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-48)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 3, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_p",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-32)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 1, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_pn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-40)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 2, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_pnn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-48)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 3, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_pnp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-48)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 3, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_pp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-40)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 2, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_ppn",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-48)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 3, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_ppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-48)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 3, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_pppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-56)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 48}}, value = Load {signed = False, bytes = 8, offset = 56, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 4, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_ppppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-64)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 56}}, value = Load {signed = False, bytes = 8, offset = 64, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 48}}, value = Load {signed = False, bytes = 8, offset = 56, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 5, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_pppppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-64)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 56}}, value = Load {signed = False, bytes = 8, offset = 64, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 48}}, value = Load {signed = False, bytes = 8, offset = 56, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 6, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_ppppppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-64)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 56}}, value = Load {signed = False, bytes = 8, offset = 64, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 48}}, value = Load {signed = False, bytes = 8, offset = 56, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 7, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_pppppppp",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-64)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 56}}, value = Load {signed = False, bytes = 8, offset = 64, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 48}}, value = Load {signed = False, bytes = 8, offset = 56, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 40}}, value = Load {signed = False, bytes = 8, offset = 48, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = Load {signed = False, bytes = 8, offset = 40, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 24}}, value = Load {signed = False, bytes = 8, offset = 32, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 8, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_v16",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 2, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_v32",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 4, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stk_save_v64",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-24)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = ConstI64 8, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_gc_fun_info", symbolOffset = 0}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_gc_noregs"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_stop_thread_ret",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64,I64], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 (-8)}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}, value = Symbol {unresolvedSymbol = "stg_enter_info", symbolOffset = 0}, valueType = I64},Store {bytes = 2, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = ConstI32 4, valueType = I32},SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 24}}}, operand1 = ConstI64 16}}, value = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},SetLocal {index = 3, value = Load {signed = False, bytes = 8, offset = 912, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 3, valueType = I64}, operand1 = ConstI64 8}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 104}}, value = Binary {binaryOp = SubInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 104}}}, operand1 = Binary {binaryOp = SubInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 872, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}, operand1 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 3, valueType = I64}}}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 912}}, value = ConstI64 5, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, valueType = I64},ReturnCall {returnCallTarget64 = "StgReturn"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_upd_frame_ret",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32,I64], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [SetLocal {index = 2, value = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 8}}}},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = GetLocal {index = 2, valueType = I64}, operand1 = ConstI64 8}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = GetLocal {index = 2, valueType = I64}}, value = Symbol {unresolvedSymbol = "stg_BLACKHOLE_info", symbolOffset = 0}, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Load {signed = False, bytes = 8, offset = 24, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, valueType = I64},Store {bytes = 8, offset = 856, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 16}, valueType = I64},ReturnCallIndirect {returnCallIndirectTarget64 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 0, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Load {signed = False, bytes = 8, offset = 856, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}}}}}}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("stg_yield_to_interpreter",Function {functionType = FunctionType {paramTypes = [], returnTypes = []}, varTypes = [I32,I32], body = CFG {graph = RelooperRun {entry = "0", blockMap = fromList [("0",RelooperBlock {addBlock = AddBlock {code = Block {name = "", bodys = [Store {bytes = 2, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Load {signed = False, bytes = 8, offset = 896, valueType = I64, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}}, operand1 = ConstI64 32}}, value = ConstI32 2, valueType = I32},Store {bytes = 8, offset = 0, ptr = Unary {unaryOp = WrapInt64, operand0 = Binary {binaryOp = AddInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, operand1 = ConstI64 912}}, value = ConstI64 3, valueType = I64},Store {bytes = 8, offset = 24, ptr = Unary {unaryOp = WrapInt64, operand0 = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 0}}, value = Symbol {unresolvedSymbol = "MainCapability", symbolOffset = 24}, valueType = I64},ReturnCall {returnCallTarget64 = "stg_returnToSchedNotPaused"}], blockReturnTypes = []}}, addBranches = []}),("1",RelooperBlock {addBlock = AddBlock {code = Unreachable}, addBranches = []})], labelHelper = 0}}}),("strlen",Function {functionType = FunctionType {paramTypes = [I64], returnTypes = [I64]}, varTypes = [I32,I32,F64], body = Block {name = "", bodys = [SetLocal {index = 3, value = CallImport {target' = "__asterius_strlen", operands = [Unary {unaryOp = ConvertUInt64ToFloat64, operand0 = GetLocal {index = 0, valueType = I64}}], callImportReturnTypes = [F64]}},Unary {unaryOp = TruncUFloat64ToInt64, operand0 = GetLocal {index = 3, valueType = F64}}], blockReturnTypes = [I64]}}),("threadPaused",Function {functionType = FunctionType {paramTypes = [I64,I64], returnTypes = []}, varTypes = [I32,I32], body = Nop})], functionImports = [FunctionImport {internalName = "__asterius_sin_F32", externalModuleName = "Math", externalBaseName = "sin", functionType = FunctionType {paramTypes = [F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_cos_F32", externalModuleName = "Math", externalBaseName = "cos", functionType = FunctionType {paramTypes = [F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_tan_F32", externalModuleName = "Math", externalBaseName = "tan", functionType = FunctionType {paramTypes = [F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_sinh_F32", externalModuleName = "Math", externalBaseName = "sinh", functionType = FunctionType {paramTypes = [F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_cosh_F32", externalModuleName = "Math", externalBaseName = "cosh", functionType = FunctionType {paramTypes = [F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_tanh_F32", externalModuleName = "Math", externalBaseName = "tanh", functionType = FunctionType {paramTypes = [F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_asin_F32", externalModuleName = "Math", externalBaseName = "asin", functionType = FunctionType {paramTypes = [F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_acos_F32", externalModuleName = "Math", externalBaseName = "acos", functionType = FunctionType {paramTypes = [F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_atan_F32", externalModuleName = "Math", externalBaseName = "atan", functionType = FunctionType {paramTypes = [F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_log_F32", externalModuleName = "Math", externalBaseName = "log", functionType = FunctionType {paramTypes = [F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_exp_F32", externalModuleName = "Math", externalBaseName = "exp", functionType = FunctionType {paramTypes = [F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_sin_F64", externalModuleName = "Math", externalBaseName = "sin", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_cos_F64", externalModuleName = "Math", externalBaseName = "cos", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_tan_F64", externalModuleName = "Math", externalBaseName = "tan", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_sinh_F64", externalModuleName = "Math", externalBaseName = "sinh", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_cosh_F64", externalModuleName = "Math", externalBaseName = "cosh", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_tanh_F64", externalModuleName = "Math", externalBaseName = "tanh", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_asin_F64", externalModuleName = "Math", externalBaseName = "asin", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_acos_F64", externalModuleName = "Math", externalBaseName = "acos", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_atan_F64", externalModuleName = "Math", externalBaseName = "atan", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_log_F64", externalModuleName = "Math", externalBaseName = "log", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_exp_F64", externalModuleName = "Math", externalBaseName = "exp", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_pow_F32", externalModuleName = "Math", externalBaseName = "pow", functionType = FunctionType {paramTypes = [F32,F32], returnTypes = [F32]}},FunctionImport {internalName = "__asterius_pow_F64", externalModuleName = "Math", externalBaseName = "pow", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_newStablePtr", externalModuleName = "StablePtr", externalBaseName = "newStablePtr", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_deRefStablePtr", externalModuleName = "StablePtr", externalBaseName = "deRefStablePtr", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_freeStablePtr", externalModuleName = "StablePtr", externalBaseName = "freeStablePtr", functionType = FunctionType {paramTypes = [F64], returnTypes = []}},FunctionImport {internalName = "printI64", externalModuleName = "rts", externalBaseName = "printI64", functionType = FunctionType {paramTypes = [F64], returnTypes = []}},FunctionImport {internalName = "assertEqI64", externalModuleName = "rts", externalBaseName = "assertEqI64", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = []}},FunctionImport {internalName = "printF32", externalModuleName = "rts", externalBaseName = "print", functionType = FunctionType {paramTypes = [F32], returnTypes = []}},FunctionImport {internalName = "printF64", externalModuleName = "rts", externalBaseName = "print", functionType = FunctionType {paramTypes = [F64], returnTypes = []}},FunctionImport {internalName = "__asterius_eventI32", externalModuleName = "rts", externalBaseName = "emitEvent", functionType = FunctionType {paramTypes = [I32], returnTypes = []}},FunctionImport {internalName = "__asterius_newTSO", externalModuleName = "TSO", externalBaseName = "newTSO", functionType = FunctionType {paramTypes = [], returnTypes = [I32]}},FunctionImport {internalName = "__asterius_setTSOret", externalModuleName = "TSO", externalBaseName = "setTSOret", functionType = FunctionType {paramTypes = [I32,F64], returnTypes = []}},FunctionImport {internalName = "__asterius_setTSOrstat", externalModuleName = "TSO", externalBaseName = "setTSOrstat", functionType = FunctionType {paramTypes = [I32,I32], returnTypes = []}},FunctionImport {internalName = "__asterius_getTSOret", externalModuleName = "TSO", externalBaseName = "getTSOret", functionType = FunctionType {paramTypes = [I32], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_getTSOrstat", externalModuleName = "TSO", externalBaseName = "getTSOrstat", functionType = FunctionType {paramTypes = [I32], returnTypes = [I32]}},FunctionImport {internalName = "__asterius_hpAlloc", externalModuleName = "HeapAlloc", externalBaseName = "hpAlloc", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_allocate", externalModuleName = "HeapAlloc", externalBaseName = "allocate", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_allocatePinned", externalModuleName = "HeapAlloc", externalBaseName = "allocatePinned", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_strlen", externalModuleName = "Memory", externalBaseName = "strlen", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_memchr", externalModuleName = "Memory", externalBaseName = "memchr", functionType = FunctionType {paramTypes = [F64,F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_memcpy", externalModuleName = "Memory", externalBaseName = "memcpy", functionType = FunctionType {paramTypes = [F64,F64,F64], returnTypes = []}},FunctionImport {internalName = "__asterius_memmove", externalModuleName = "Memory", externalBaseName = "memmove", functionType = FunctionType {paramTypes = [F64,F64,F64], returnTypes = []}},FunctionImport {internalName = "__asterius_memset", externalModuleName = "Memory", externalBaseName = "memset", functionType = FunctionType {paramTypes = [F64,F64,F64], returnTypes = []}},FunctionImport {internalName = "__asterius_memcmp", externalModuleName = "Memory", externalBaseName = "memcmp", functionType = FunctionType {paramTypes = [F64,F64,F64], returnTypes = [I32]}},FunctionImport {internalName = "__asterius_fromJSArrayBuffer_imp", externalModuleName = "HeapBuilder", externalBaseName = "fromJSArrayBuffer", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_toJSArrayBuffer_imp", externalModuleName = "HeapBuilder", externalBaseName = "toJSArrayBuffer", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_fromJSString_imp", externalModuleName = "HeapBuilder", externalBaseName = "fromJSString", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_fromJSArray_imp", externalModuleName = "HeapBuilder", externalBaseName = "fromJSArray", functionType = FunctionType {paramTypes = [F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_gcRootTSO", externalModuleName = "GC", externalBaseName = "gcRootTSO", functionType = FunctionType {paramTypes = [F64], returnTypes = []}},FunctionImport {internalName = "__asterius_fps_reverse", externalModuleName = "bytestring", externalBaseName = "fps_reverse", functionType = FunctionType {paramTypes = [F64,F64,F64], returnTypes = []}},FunctionImport {internalName = "__asterius_fps_intersperse", externalModuleName = "bytestring", externalBaseName = "fps_intersperse", functionType = FunctionType {paramTypes = [F64,F64,F64,F64], returnTypes = []}},FunctionImport {internalName = "__asterius_fps_maximum", externalModuleName = "bytestring", externalBaseName = "fps_maximum", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_fps_minimum", externalModuleName = "bytestring", externalBaseName = "fps_minimum", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_fps_count", externalModuleName = "bytestring", externalBaseName = "fps_count", functionType = FunctionType {paramTypes = [F64,F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius_fps_memcpy_offsets", externalModuleName = "bytestring", externalBaseName = "fps_memcpy_offsets", functionType = FunctionType {paramTypes = [F64,F64,F64,F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius__hs_bytestring_int_dec", externalModuleName = "bytestring", externalBaseName = "_hs_bytestring_int_dec", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius__hs_bytestring_long_long_int_dec", externalModuleName = "bytestring", externalBaseName = "_hs_bytestring_long_long_int_dec", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius__hs_bytestring_uint_dec", externalModuleName = "bytestring", externalBaseName = "_hs_bytestring_uint_dec", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius__hs_bytestring_long_long_uint_dec", externalModuleName = "bytestring", externalBaseName = "_hs_bytestring_long_long_uint_dec", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius__hs_bytestring_int_dec_padded9", externalModuleName = "bytestring", externalBaseName = "_hs_bytestring_int_dec_padded9", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = []}},FunctionImport {internalName = "__asterius__hs_bytestring_long_long_int_dec_padded18", externalModuleName = "bytestring", externalBaseName = "_hs_bytestring_long_long_int_dec_padded18", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = []}},FunctionImport {internalName = "__asterius__hs_bytestring_uint_hex", externalModuleName = "bytestring", externalBaseName = "_hs_bytestring_uint_hex", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = [F64]}},FunctionImport {internalName = "__asterius__hs_bytestring_long_long_uint_hex", externalModuleName = "bytestring", externalBaseName = "_hs_bytestring_long_long_uint_hex", functionType = FunctionType {paramTypes = [F64,F64], returnTypes = [F64]}}], functionExports = [FunctionExport {internalName = "loadI64_wrapper", externalName = "loadI64"},FunctionExport {internalName = "rts_mkBool_wrapper", externalName = "rts_mkBool"},FunctionExport {internalName = "rts_mkDouble_wrapper", externalName = "rts_mkDouble"},FunctionExport {internalName = "rts_mkChar_wrapper", externalName = "rts_mkChar"},FunctionExport {internalName = "rts_mkInt_wrapper", externalName = "rts_mkInt"},FunctionExport {internalName = "rts_mkWord_wrapper", externalName = "rts_mkWord"},FunctionExport {internalName = "rts_mkPtr_wrapper", externalName = "rts_mkPtr"},FunctionExport {internalName = "rts_mkStablePtr_wrapper", externalName = "rts_mkStablePtr"},FunctionExport {internalName = "rts_getBool_wrapper", externalName = "rts_getBool"},FunctionExport {internalName = "rts_getDouble_wrapper", externalName = "rts_getDouble"},FunctionExport {internalName = "rts_getChar_wrapper", externalName = "rts_getChar"},FunctionExport {internalName = "rts_getInt_wrapper", externalName = "rts_getInt"},FunctionExport {internalName = "rts_getWord_wrapper", externalName = "rts_getWord"},FunctionExport {internalName = "rts_getPtr_wrapper", externalName = "rts_getPtr"},FunctionExport {internalName = "rts_getStablePtr_wrapper", externalName = "rts_getStablePtr"},FunctionExport {internalName = "rts_apply_wrapper", externalName = "rts_apply"},FunctionExport {internalName = "rts_eval_wrapper", externalName = "rts_eval"},FunctionExport {internalName = "rts_evalIO_wrapper", externalName = "rts_evalIO"},FunctionExport {internalName = "rts_evalLazyIO_wrapper", externalName = "rts_evalLazyIO"},FunctionExport {internalName = "rts_getSchedStatus_wrapper", externalName = "rts_getSchedStatus"},FunctionExport {internalName = "rts_checkSchedStatus_wrapper", externalName = "rts_checkSchedStatus"},FunctionExport {internalName = "getStablePtr_wrapper", externalName = "getStablePtr"},FunctionExport {internalName = "deRefStablePtr_wrapper", externalName = "deRefStablePtr"},FunctionExport {internalName = "hs_free_stable_ptr_wrapper", externalName = "hs_free_stable_ptr"},FunctionExport {internalName = "__asterius_getTSOret", externalName = "getTSOret"},FunctionExport {internalName = "__asterius_getTSOrstat", externalName = "getTSOrstat"},FunctionExport {internalName = "hs_init", externalName = "hs_init"},FunctionExport {internalName = "main", externalName = "main"}], functionTable = FunctionTable {tableFunctionNames = ["NoMain_.Lc1MX","NoMain_.Lc1Md","NoMain_.Lc1Mw","NoMain_.Lc1My","NoMain_.Lc1Nd","NoMain_.Ls1IS_entry","NoMain_x1_entry","NoMain_x2_entry","NoMain_x_entry","StgReturn","__asterius_toJSArrayBuffer","__stg_EAGER_BLACKHOLE_entry","__stg_gc_enter_1","__stg_gc_fun","allocate","allocatePinned","base_GHCziForeignPtr_NoFinalizzers_con_entry","base_GHCziForeignPtr_PlainForeignPtr_con_entry","base_GHCziPtr_Ptr_con_entry","base_GHCziStable_StablePtr_con_entry","bytestringzm0zi10zi9zi0zmEZZJ7bbpFgGADQ1WhOW4dB3_DataziByteStringziInternal_PS_con_entry","createGenThread","createIOThread","createStrictIOThread","createThread","deRefStablePtr","deRefStablePtr_wrapper","getStablePtr","getStablePtr_wrapper","ghczmprim_GHCziTypes_Czh_con_entry","ghczmprim_GHCziTypes_Dzh_con_entry","ghczmprim_GHCziTypes_False_con_entry","ghczmprim_GHCziTypes_Izh_con_entry","ghczmprim_GHCziTypes_True_con_entry","ghczmprim_GHCziTypes_Wzh_con_entry","ghczmprim_GHCziTypes_ZC_con_entry","ghczmprim_GHCziTypes_ZMZN_con_entry","hs_free_stable_ptr","hs_free_stable_ptr_wrapper","hs_init","integerzmwiredzmin_GHCziIntegerziType_Integer_con_entry","loadI64","loadI64_wrapper","main","newCAF","rts_HeapStackCheck_.Lc1NB","rts_apply","rts_apply_wrapper","rts_checkSchedStatus","rts_checkSchedStatus_wrapper","rts_eval","rts_evalIO","rts_evalIO_wrapper","rts_evalLazyIO","rts_evalLazyIO_wrapper","rts_eval_wrapper","rts_getBool","rts_getBool_wrapper","rts_getChar","rts_getChar_wrapper","rts_getDouble","rts_getDouble_wrapper","rts_getInt","rts_getInt_wrapper","rts_getPtr","rts_getPtr_wrapper","rts_getSchedStatus","rts_getSchedStatus_wrapper","rts_getStablePtr","rts_getStablePtr_wrapper","rts_getWord","rts_getWord_wrapper","rts_mkBool","rts_mkBool_wrapper","rts_mkChar","rts_mkChar_wrapper","rts_mkDouble","rts_mkDouble_wrapper","rts_mkInt","rts_mkInt_wrapper","rts_mkPtr","rts_mkPtr_wrapper","rts_mkStablePtr","rts_mkStablePtr_wrapper","rts_mkWord","rts_mkWord_wrapper","scheduleWaitThread","stg_ARR_WORDS_entry","stg_BCO_entry","stg_BLACKHOLE_entry","stg_BLOCKING_QUEUE_CLEAN_entry","stg_BLOCKING_QUEUE_DIRTY_entry","stg_CAF_BLACKHOLE_entry","stg_DEAD_WEAK_entry","stg_IND_STATIC_entry","stg_IND_entry","stg_MSG_BLACKHOLE_entry","stg_MUT_VAR_DIRTY_entry","stg_NO_FINALIZER_entry","stg_PAP_apply","stg_PAP_entry","stg_STACK_entry","stg_TSO_entry","stg_WEAK_entry","stg_ap_2_upd_entry","stg_ap_p_fast","stg_ap_p_ret","stg_ap_stk_","stg_ap_stk_d","stg_ap_stk_f","stg_ap_stk_l","stg_ap_stk_n","stg_ap_stk_nn","stg_ap_stk_nnn","stg_ap_stk_nnp","stg_ap_stk_np","stg_ap_stk_npn","stg_ap_stk_npp","stg_ap_stk_p","stg_ap_stk_pn","stg_ap_stk_pnn","stg_ap_stk_pnp","stg_ap_stk_pp","stg_ap_stk_ppn","stg_ap_stk_ppp","stg_ap_stk_pppp","stg_ap_stk_ppppp","stg_ap_stk_pppppp","stg_ap_stk_ppppppp","stg_ap_stk_pppppppp","stg_ap_stk_v16","stg_ap_stk_v32","stg_ap_stk_v64","stg_ap_v_ret","stg_apply_interp_ret","stg_bh_upd_frame_ret","stg_block_blackhole","stg_enter_ret","stg_forceIO_ret","stg_gc_fun_ret","stg_gc_noregs","stg_gc_prim_p","stg_gc_unpt_r1","stg_marked_upd_frame_ret","stg_newMutVarzh","stg_ret_p_ret","stg_returnToSched","stg_returnToSchedNotPaused","stg_returnToStackTop","stg_stk_save_","stg_stk_save_d","stg_stk_save_f","stg_stk_save_l","stg_stk_save_n","stg_stk_save_nn","stg_stk_save_nnn","stg_stk_save_nnp","stg_stk_save_np","stg_stk_save_npn","stg_stk_save_npp","stg_stk_save_p","stg_stk_save_pn","stg_stk_save_pnn","stg_stk_save_pnp","stg_stk_save_pp","stg_stk_save_ppn","stg_stk_save_ppp","stg_stk_save_pppp","stg_stk_save_ppppp","stg_stk_save_pppppp","stg_stk_save_ppppppp","stg_stk_save_pppppppp","stg_stk_save_v16","stg_stk_save_v32","stg_stk_save_v64","stg_stop_thread_ret","stg_upd_frame_ret","stg_yield_to_interpreter","strlen","threadPaused"], tableOffset = 1}, tableImport = TableImport {externalModuleName = "WasmTable", externalBaseName = "table"}, tableExport = TableExport {externalName = "table"}, tableSlots = 181, memorySegments = [DataSegment {contentoffset = 0},DataSegment {content = "\STX\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\RS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 1184},DataSegment {content = "\ETX\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\RS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 1216},DataSegment {content = "\EOT\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\RS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 1248},DataSegment {content = "\ENQ\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\RS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 1280},DataSegment {content = "\ACK\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\ETX\NUL\NUL\NUL\SI\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 1312},DataSegment {content = "P\ENQ\NUL\NUL\247\255\US\NUL", offset = 1344},DataSegment {content = "\a\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\SO\NUL\NUL\NUL\NUL\NUL\NUL\NUL\ETX\NUL\NUL\NUL\SOH\NUL\NUL\NUL\128\ENQ\NUL\NUL\247\255\US\NUL", offset = 1360},DataSegment {content = "\b\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\SO\NUL\NUL\NUL\NUL\NUL\NUL\NUL\ETX\NUL\NUL\NUL\SOH\NUL\NUL\NUL\192\ENQ\NUL\NUL\247\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\t\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NAK\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 1408},DataSegment {content = "Lorem ipsum\NUL", offset = 1504},DataSegment {content = "\NUL\NUL\255\255\255\255\US\NUL", offset = 1520},DataSegment {content = "\f\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL&\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 1536},DataSegment {content = "0\ACK\NUL\NUL\247\255\US\NUL", offset = 1568},DataSegment {content = "\DC1\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\160\ACK\NUL\NUL\247\255\US\NUL\DC2\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NULp\ACK\NUL\NUL\247\255\US\NULbase:GHC.ForeignPtr.PlainForeignPtr\NUL", offset = 1584},DataSegment {content = "base:GHC.ForeignPtr.NoFinalizers\NUL", offset = 1696},DataSegment {content = "\DC3\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\240\ACK\NUL\NUL\247\255\US\NULbase:GHC.Ptr.Ptr\NUL", offset = 1744},DataSegment {content = "\DC4\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL0\a\NUL\NUL\247\255\US\NULbase:GHC.Stable.StablePtr\NUL", offset = 1808},DataSegment {content = "\NAK\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NULp\a\NUL\NUL\247\255\US\NULbytestring-0.10.9.0-EZJ7bbpFgGADQ1WhOW4dB3:Data.ByteString.Internal.PS\NUL", offset = 1872},DataSegment {content = "\RS\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\144\t\NUL\NUL\247\255\US\NUL\US\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\176\t\NUL\NUL\247\255\US\NUL\DLE\b\NUL\NUL\247\255\US\NUL", offset = 1984},DataSegment {content = " \NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\240\b\NUL\NUL\247\255\US\NUL!\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\DLE\t\NUL\NUL\247\255\US\NUL`\b\NUL\NUL\247\255\US\NUL", offset = 2064},DataSegment {content = "\"\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\SOH\NUL\NUL\NULp\t\NUL\NUL\247\255\US\NUL#\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\208\t\NUL\NUL\247\255\US\NUL$\NUL\NUL\NUL\237\255\US\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\EOT\NUL\NUL\NUL\SOH\NUL\NUL\NULP\t\NUL\NUL\247\255\US\NUL\208\b\NUL\NUL\247\255\US\NUL", offset = 2144},DataSegment {content = "%\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL0\t\NUL\NUL\247\255\US\NULghc-prim:GHC.Types.False\NUL", offset = 2256},DataSegment {content = "ghc-prim:GHC.Types.I#\NUL", offset = 2320},DataSegment {content = "ghc-prim:GHC.Types.[]\NUL", offset = 2352},DataSegment {content = "ghc-prim:GHC.Types.:\NUL", offset = 2384},DataSegment {content = "ghc-prim:GHC.Types.True\NUL", offset = 2416},DataSegment {content = "ghc-prim:GHC.Types.C#\NUL", offset = 2448},DataSegment {content = "ghc-prim:GHC.Types.D#\NUL", offset = 2480},DataSegment {content = "ghc-prim:GHC.Types.W#\NUL", offset = 2512},DataSegment {content = ")\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\DLE\n\NUL\NUL\247\255\US\NULinteger-wired-in:GHC.Integer.Type.Integer\NUL", offset = 2544},DataSegment {content = "PAP object entered!\NUL", offset = 2624},DataSegment {content = "stg_ap_v_ret\NUL", offset = 2656},DataSegment {content = "stg_ap_p_ret\NUL", offset = 2672},DataSegment {content = ".\NUL\NUL\NUL\237\255\US\NUL\130\NUL\NUL\NUL\NUL\NUL\NUL\NUL\RS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 2688},DataSegment {content = "BLOCKING_QUEUE_CLEAN object (%p) entered!\NUL", offset = 2720},DataSegment {content = "BLOCKING_QUEUE_DIRTY object (%p) entered!\NUL", offset = 2768},DataSegment {content = "TSO object (%p) entered!\NUL", offset = 2816},DataSegment {content = "STACK object (%p) entered!\NUL", offset = 2848},DataSegment {content = "WEAK object (%p) entered!\NUL", offset = 2880},DataSegment {content = "DEAD_WEAK object (%p) entered!\NUL", offset = 2912},DataSegment {content = "NO_FINALIZER object (%p) entered!\NUL", offset = 2944},DataSegment {content = "ARR_WORDS object (%p) entered!\NUL", offset = 2992},DataSegment {content = "MSG_BLACKHOLE object (%p) entered!\NUL", offset = 3024},DataSegment {content = "MUT_VAR_DIRTY object (%p) entered!\NUL", offset = 3072},DataSegment {content = "MSG_BLACKHOLE\NUL", offset = 3120},DataSegment {content = "DEAD_WEAK\NUL", offset = 3136},DataSegment {content = "NO_FINALIZER\NUL", offset = 3152},DataSegment {content = "X\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL*\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3168},DataSegment {content = "Z\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL&\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3200},DataSegment {content = "[\NUL\NUL\NUL\237\255\US\NUL\EOT\NUL\NUL\NUL\NUL\NUL\NUL\NUL%\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3232},DataSegment {content = "\\\NUL\NUL\NUL\237\255\US\NUL\EOT\NUL\NUL\NUL\NUL\NUL\NUL\NUL%\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3264},DataSegment {content = "]\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL&\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3296},DataSegment {content = "^\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\ENQ\NUL\NUL\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL@\f\NUL\NUL\247\255\US\NUL_\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL\FS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3328},DataSegment {content = "`\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL\ESC\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3392},DataSegment {content = "a\NUL\NUL\NUL\237\255\US\NUL\ETX\NUL\NUL\NUL\NUL\NUL\NUL\NUL2\NUL\NUL\NUL\NUL\NUL\NUL\NUL0\f\NUL\NUL\247\255\US\NULb\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL0\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3424},DataSegment {content = "\176\r\NUL\NUL\247\255\US\NUL", offset = 3488},DataSegment {content = "c\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\SOH\NUL\NUL\NUL\a\NUL\NUL\NUL\NUL\NUL\NUL\NULP\f\NUL\NUL\247\255\US\NULe\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\EM\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3504},DataSegment {content = "f\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL5\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3568},DataSegment {content = "g\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL4\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3600},DataSegment {content = "h\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\EOT\NUL\NUL\NUL1\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3632},DataSegment {content = "i\NUL\NUL\NUL\237\255\US\NUL\STX\NUL\NUL\NUL\NUL\NUL\NUL\NUL\DC2\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3664},DataSegment {content = "k\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL\RS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3696},DataSegment {content = "\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NULl\NUL\NUL\NUL\237\255\US\NULp\NUL\NUL\NUL\237\255\US\NULw\NUL\NUL\NUL\237\255\US\NULn\NUL\NUL\NUL\237\255\US\NULm\NUL\NUL\NUL\237\255\US\NULo\NUL\NUL\NUL\237\255\US\NUL\131\NUL\NUL\NUL\237\255\US\NUL\132\NUL\NUL\NUL\237\255\US\NUL\133\NUL\NUL\NUL\237\255\US\NULq\NUL\NUL\NUL\237\255\US\NULt\NUL\NUL\NUL\237\255\US\NULx\NUL\NUL\NUL\237\255\US\NUL{\NUL\NUL\NUL\237\255\US\NULr\NUL\NUL\NUL\237\255\US\NULs\NUL\NUL\NUL\237\255\US\NULu\NUL\NUL\NUL\237\255\US\NULv\NUL\NUL\NUL\237\255\US\NULy\NUL\NUL\NUL\237\255\US\NULz\NUL\NUL\NUL\237\255\US\NUL|\NUL\NUL\NUL\237\255\US\NUL}\NUL\NUL\NUL\237\255\US\NUL~\NUL\NUL\NUL\237\255\US\NUL\DEL\NUL\NUL\NUL\237\255\US\NUL\128\NUL\NUL\NUL\237\255\US\NUL\129\NUL\NUL\NUL\237\255\US\NUL\130\NUL\NUL\NUL\237\255\US\NUL", offset = 3728},DataSegment {content = "\134\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\RS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 3968},DataSegment {content = "\135\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\GS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 4000},DataSegment {contenta\NUL\NUL\NUL\NUL\NUL\NUL\NUL\b\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 4032},DataSegment {content = "\136\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL!\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 4272},DataSegment {content = "\138\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL\RS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 4304},DataSegment {content = "\139\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\RS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 4336},DataSegment {content = "\140\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL \NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 4368},DataSegment {content = "\146\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL\RS\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 4400},DataSegment {contentoffset = 4432},DataSegment {content = "\176\NUL\NUL\NUL\237\255\US\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL\NUL$\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 4672},DataSegment {content = "\177\NUL\NUL\NUL\237\255\US\NUL\SOH\NUL\NUL\NUL\NUL\NUL\NUL\NUL!\NUL\NUL\NUL\NUL\NUL\NUL\NUL", offset = 4704}], memoryImport = MemoryImport {externalModuleName = "WasmMemory", externalBaseName = "memory"}, memoryExport = MemoryExport {externalName = "memory"}, memoryMBlocks = 1}